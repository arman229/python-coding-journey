from typing import Dict,List 
 
questions:Dict[str,str] = {
    "2-1": "2-1. Simple Message: Assign a message to a variable, and then print that message.",
    "2-2": "2-2. Simple Messages: Assign a message to a variable, and print that message.Then change the value of the variable to a new message, and print the new message.",
    "2-3": "2-3. Personal Message: Use a variable to represent a person’s name, and print a message to that person. Your message should be simple, such as, “Hello Eric, would you like to learn some Python today?”",
    "2-4": "2-4. Name Cases: Use a variable to represent a person’s name, and then print that person’s name in lowercase, uppercase, and title case.",
    "2-5": "2-5. Famous Quote: Find a quote from a famous person you admire. Print the quote and the name of its author. Your output should look something like the following, including the quotation marks: Albert Einstein once said, “A person who never made a mistake never tried anything new.”",
    "2-6": "2-6. Famous Quote 2: Repeat Exercise 2-5, but this time, represent the famous person’s name using a variable called famous_person. Then compose your message and represent it with a new variable called message. Print your message.",
    "2-7": "2-7. Stripping Names: Use a variable to represent a person’s name, and include some whitespace characters at the beginning and end of the name. Make sure you use each character combination, '\t' and , at least once. Print the name once, so the whitespace around the name is displayed. Then print the name using each of the three stripping functions, lstrip(), rstrip(), and strip().",
    "2-8": "2-8. File Extensions: Python has a removesuffix() method that works exactly like removeprefix(). Assign the value 'python_notes.txt' to a variable called filename. Then use the removesuffix() method to display the filename without the file extension, like some file browsers do.",
    "2-9": "2-9. Number Eight: Write addition, subtraction, multiplication, and division operations that each result in the number 8. Be sure to enclose your operations in print() calls to see the results. You should create four lines that look like this: print(5+3) Your output should be four lines, with the number 8 appearing once on each line.",
    "2-10": "2-10. Favorite Number: Use a variable to represent your favorite number. Then, using that variable, create a message that reveals your favorite number. Print that message.",
    "2-11": "2-11. Adding Comments: Choose two of the programs you’ve written, and add at least one comment to each. If you don’t have anything specific to write because your programs are too simple at this point, just add your name and the current date at the top of each program file. Then write one sentence describing what the program does.",
    "2-12": "2-12. Zen of Python: Enter import this into a Python terminal session and skim through the additional principles.",
    "3-1": "3-1. Names: Store the names of a few of your friends in a list called names. Print each person’s name by accessing each element in the list, one at a time.",
    "3-2": "3-2. Greetings: Start with the list you used in Exercise 3-1, but instead of just printing each person’s name, print a message to them. The text of each message should be the same, but each message should be personalized with the person’s name.",
    "3-3": "3-3. Your Own List: Think of your favorite mode of transportation, such as a motorcycle or a car, and make a list that stores several examples. Use your list to print a series of statements about these items, such as “I would like to own a Honda motorcycle.”",
    "3-4": "3-4. Guest List: If you could invite anyone, living or deceased, to dinner, who would you invite? Make a list that includes at least three people you’d like to invite to dinner. Then use your list to print a message to each person, inviting them to dinner.",
    "3-5": "3-5. Changing Guest List: You just heard that one of your guests can’t make the dinner, so you need to send out a new set of invitations. You’ll have to think of someone else to invite.",
    "3-6": "3-6. More Guests: You just found a bigger dinner table, so now more space is available. Think of three more guests to invite to dinner.",
    "3-7": "3-7. Shrinking Guest List: You just found out that your new dinner table won’t arrive in time for the dinner, and now you have space for only two guests.",
    "3-8": "3-8. Seeing the World: Think of at least five places in the world you’d like to visit.",
    "3-9": "3-9. Dinner Guests: Working with one of the programs from Exercises 3-4 through 3-7, use len() to print a message indicating the number of people you’re inviting to dinner.",
    "3-10": "3-10. Every Function: Think of things you could store in a list. Write a program that creates a list containing these items and then uses each function introduced in this chapter at least once.",
    "3-11": "3-11. Intentional Error: If you haven’t received an index error in one of your programs yet, try to make one happen.",
    "4-1": "4-1. Pizzas: Think of at least three kinds of your favorite pizza. Store these pizza names in a list, and then use a for loop to print the name of each pizza.Modify your for loop to print a sentence using the name of the pizza, instead of printing just the name of the pizza. For each pizza, you should have one line of output containing a simple statement like I like pepperoni pizza.Add a line at the end of your program, outside the for loop, that states how much you like pizza. The output should consist of three or more lines about the kinds of pizza you like and then an additional sentence, such as I really love pizza!",
    "4-2": "4-2. Animals: Think of at least three different animals that have a common characteristic. Store the names of these animals in a list, and then use a for loop to print out the name of each animal.Modify your program to print a statement about each animal, such as A dog would make a great pet.Add a line at the end of your program, stating what these animals have in common. You could print a sentence, such as Any of these animals would make a great pet!",
    "4-3": "4-3. Counting to Twenty: Use a for loop to print the numbers from 1 to 20, inclusive.",
    "4-4": "4-4. One Million: Make a list of the numbers from one to one million, and then use a for loop to print the numbers. (If the output is taking too long, stop it by pressing CTRL-C or by closing the output window.)",
    "4-5": "4-5. Summing a Million: Make a list of the numbers from one to one million, and then use min() and max() to make sure your list actually starts at one and ends at one million. Also, use the sum() function to see how quickly Python can add a million numbers.",
    "4-6": "4-6. Odd Numbers: Use the third argument of the range() function to make a list of the odd numbers from 1 to 20. Use a for loop to print each number.",
    "4-7": "4-7. Threes: Make a list of the multiples of 3, from 3 to 30. Use a for loop to print the numbers in your list.",
    "4-8": "4-8. Cubes: A number raised to the third power is called a cube. For example, the cube of 2 is written as 2**3 in Python. Make a list of the first 10 cubes (that is, the cube of each integer from 1 through 10), and use a for loop to print out the value of each cube.",
    "4-9": "4-9. Cube Comprehension: Use a list comprehension to generate a list of the first 10 cubes.",
    "4-10": "4-10. Slices: Using one of the programs you wrote in this chapter, add several lines to the end of the program that do the following: print the first three items from that program’s list.Print the message The first three items in the list are:. Then use a slice to Print the message Three items from the middle of the list are:. Then use a slice to print three items from the middle of the list.Print the message The last three items in the list are:. Then use a slice to print the last three items in the list.",
    "4-11": "4-11. My Pizzas, Your Pizzas: Start with your program from Exercise 4-1 (page 56). Make a copy of the list of pizzas, and call it friend_pizzas. Then, do the following:Add a new pizza to the original list.Add a different pizza to the list friend_pizzas.Prove that you have two separate lists. Print the message My favorite pizzas are:, and then use a for loop to print the first list. Print the message My friend’s favorite pizzas are:, and then use a for loop to print the second list. Make sure each new pizza is stored in the appropriate list.",
    "4-12": "4-12. More Loops: All versions of foods.py in this section have avoided using for loops when printing, to save space. Choose a version of foods.py, and write two for loops to print each list of foods.",
    "4-13": "4-13. Buffet: A buffet-style restaurant offers only five basic foods. Think of five simple foods, and store them in a tuple. • Use a for loop to print each food the restaurant offers. • Try to modify one of the items, and make sure that Python rejects the change. • The restaurant changes its menu, replacing two of the items with different foods. Add a line that rewrites the tuple, and then use a for loop to print each of the items on the revised menu.",
    "5-1": "5-1. Conditional Tests: Write a series of conditional tests. Print a statement describing each test and your prediction for the results of each test. Your code should look something like this: car = 'subaru' print('Is car == subaru? I predict True.') print(car == 'subaru') print('Is car == audi? I predict False.') print(car == 'audi') Look closely at your results, and make sure you understand why each line evaluates to True or False. Create at least 10 tests. Have at least 5 tests evaluate to True and another 5 tests evaluate to False.",
    "5-2": "5-2. More Conditional Tests: You don’t have to limit the number of tests you create to 10. If you want to try more comparisons, write more tests and add them to conditional_tests.py. Have at least one True and one False result for each of the following: less than, greater than, equal to, greater than or equal to, and less than or equal to. Tests for equality and inequality with strings. Tests using the lower() method. Numerical tests involving equality and inequality, greater than and less than. Tests using the and keyword and the or keyword. Test whether an item is in a list. Test whether an item is not in a list.",
    "5-3": "5-3. Alien Colors #1: Imagine an alien was just shot down in a game. Create a variable called alien_color and assign it a value of 'green', 'yellow', or 'red'. Write an if statement to test whether the alien’s color is green. If it is, print a message that the player just earned 5 points. Write one version of this program that passes the if test and another that fails.",
    "5-4": "5-4. Alien Colors #2: Choose a color for an alien as you did in Exercise 5-3, and write an if-else chain. If the alien’s color is green, print a statement that the player just earned 5 points. If the alien’s color isn’t green, print a statement that the player just earned 10 points. Write one version of this program that runs the if block and another that runs the else block.",
    "5-5": "5-5. Alien Colors #3: Turn your if-else chain from Exercise 5-4 into an if-elif-else chain. If the alien is green, print a message that the player earned 5 points. If the alien is yellow, print a message that the player earned 10 points. If the alien is red, print a message that the player earned 15 points. Write three versions of this program, making sure each message is printed for the appropriate color alien.",
    "5-6": "5-6. Stages of Life: Write an if-elif-else chain that determines a person’s stage of life. Set a value for the variable age, and then: If the person is less than 2 years old, print a message that the person is a baby. If the person is at least 2 years old but less than 4, print a message that the person is a toddler. If the person is at least 4 years old but less than 13, print a message that the person is a kid. If the person is at least 13 years old but less than 20, print a message that the person is a teenager. If the person is at least 20 years old but less than 65, print a message that the person is an adult. If the person is age 65 or older, print a message that the person is an elder.",
    "5-7": "5-7. Favorite Fruit: Make a list of your favorite fruits, and then write a series of independent if statements that check for certain fruits in your list. Make a list of your three favorite fruits and call it favorite_fruits. Write five if statements. Each should check whether a certain kind of fruit is in your list. If the fruit is in your list, the if block should print a statement, such as You really like bananas!",
    "5-8": "5-8. Hello Admin: Make a list of five or more usernames, including the name 'admin'. Imagine you are writing code that will print a greeting to each user after they log in to a website. Loop through the list, and print a greeting to each user. If the username is 'admin', print a special greeting, such as Hello admin, would you like to see a status report? Otherwise, print a generic greeting, such as Hello Jaden, thank you for logging in again.",
    "5-9": "5-9. No Users: Add an if test to hello_admin.py to make sure the list of users is not empty. If the list is empty, print the message We need to find some users! Remove all of the usernames from your list, and make sure the correct message is printed.",
    "5-10": "5-10. Checking Usernames: Do the following to create a program that simulates how websites ensure that everyone has a unique username. Make a list of five or more usernames called current_users. Make another list of five usernames called new_users. Make sure one or two of the new usernames are also in the current_users list. Loop through the new_users list to see if each new username has already been used. If it has, print a message that the person will need to enter a new username. If a username has not been used, print a message saying Make sure your comparison is case insensitive. If 'John' has been used, 'JOHN' should not be accepted. (To do this, you’ll need to make a copy of current_users containing the lowercase versions of all existing users.)",
    "5-11": "5-11. Ordinal Numbers: Ordinal numbers indicate their position in a list, such as 1st or 2nd. Most ordinal numbers end in th, except 1, 2, and 3. Store the numbers 1 through 9 in a list. 8 Loop through the list. Use an if-elif-else chain inside the loop to print the proper ordinal ending for each number. Your output should read '1st 2nd 3rd 4th 5th 6th 7th 8th 9th', and each result should be on a separate line.",
    "6-1": "6-1. Person: Use a dictionary to store information about a person you know. Store their first name, last name, age, and the city in which they live. You should have keys such as first_name, last_name, age, and city. Print each piece of information stored in your dictionary.",
    "6-2": "6-2. Favorite Numbers: Use a dictionary to store people’s favorite numbers. Think of five names, and use them as keys in your dictionary. Think of a favorite number for each person, and store each as a value in your dictionary. Print each person’s name and their favorite number.",
    "6-3": "6-3. Glossary: A Python dictionary can be used to model an actual dictionary. However, to avoid confusion, let’s call it a glossary. • Think of five programming words you’ve learned about in the previous chapters. Use these words as the keys in your glossary, and store their meanings as values. • Print each word and its meaning as neatly formatted output. You might print the word followed by a colon and then its meaning, or print the word on one line and then print its meaning indented on a second line. Use the newline character (\n) to insert a blank line between each word-meaning pair in your output.",
    "6-4": "6-4. Glossary 2: Now that you know how to loop through a dictionary, clean up the code from Exercise 6-3 by replacing your series of print() calls with a loop that runs through the dictionary’s keys and values.",
    "6-5": "6-5. Rivers: Make a dictionary containing three major rivers and the country each river runs through. Use a loop to print a sentence about each river, print the name of each river included in the dictionary, and print the name of each country included in the dictionary.",
    "6-6": "6-6. Polling: Use the code in favorite_languages.py. Make a list of people who should take the favorite languages poll. Loop through the list of people who should take the poll. If they have already taken the poll, print a message thanking them for responding. If they have not yet taken the poll, print a message inviting them to take the poll.",
    "6-7": "6-7. People: Start with the program you wrote for Exercise 6-1. Make two new dictionaries representing different people, and store all three dictionaries in a list called people. Loop through your list of people. As you loop through the list, print everything you know about each person.",
    "6-8": "6-8. Pets: Make several dictionaries, where each dictionary represents a different pet. In each dictionary, include the kind of animal and the owner’s name. Store these dictionaries in a list called pets. Next, loop through your list and as you do, print everything you know about each pet.",
    "6-9": "6-9. Favorite Places: Make a dictionary called favorite_places. Think of three names to use as keys in the dictionary, and store one to three favorite places for each person. Loop through the dictionary, and print each person’s name and their favorite places.",
    "6-10": "6-10. Favorite Numbers: Modify your program from Exercise 6-2 so each person can have more than one favorite number. Then print each person’s name along with their favorite numbers.",
    "6-11": "6-11. Cities: Make a dictionary called cities. Use the names of three cities as keys in your dictionary. Create a dictionary of information about each city and include the country that the city is in, its approximate population, and one fact about that city. Print the name of each city and all of the information you have stored about it.",
    "6-12": "6-12. Extensions: We’re now working with examples that are complex enough that they can be extended in any number of ways. Use one of the example programs from this chapter, and extend it by adding new keys and values, changing the context of the program, or improving the formatting of the output.",
    "7-1": "7-1. Rental Car: Write a program that asks the user what kind of rental car they would like. Print a message about that car, such as “Let me see if I can find you a Subaru.”",
    "7-2": "7-2. Restaurant Seating: Write a program that asks the user how many people are in their dinner group. If the answer is more than eight, print a message saying they’ll have to wait for a table. Otherwise, report that their table is ready.",
    "7-3": "7-3. Multiples of Ten: Ask the user for a number, and then report whether the number is a multiple of 10 or not.",
    "7-4": "7-4. Pizza Toppings: Write a loop that prompts the user to enter a series of pizza toppings until they enter a 'quit' value. As they enter each topping, print a message saying you’ll add that topping to their pizza.",
    "7-5": "7-5. Movie Tickets: A movie theater charges different ticket prices depending on a person’s age. If a person is under the age of 3, the ticket is free; if they are between 3 and 12, the ticket is $10; otherwise, the ticket is $15. Write a loop in which you ask users their age, and then tell them the cost of their movie ticket.",
    "7-6": "7-6. Three Exits: Write different versions of either Exercise 7-4 or 7-5 that do each of the following at least once: • Use a conditional test in the while statement to stop the loop. • Use an active variable to control how long the loop runs. • Use a break statement to exit the loop when the user enters a 'quit' value.",
    "7-7": "7-7. Infinity: Write a loop that never ends, and run it. (To end the loop, press CTRL-C or close the window displaying the output.)",
    "7-8": "7-8. Deli: Make a list called sandwich_orders and fill it with the names of various sandwiches. Then make an empty list called finished_sandwiches. Loop through the list of sandwich orders and print a message for each order, such as I made your tuna sandwich. As each sandwich is made, move it to the list of finished sandwiches. After all the sandwiches have been made, print a message listing each sandwich that was made.",
    "7-9": "7-9. No Pastrami: Using the list sandwich_orders from Exercise 7-8, make sure the sandwich 'pastrami' appears in the list at least three times. Add code near the beginning of your program to print a message saying the deli has run out of pastrami, and then use a while loop to remove all occurrences of 'pastrami' from sandwich_orders. Make sure no pastrami sandwiches end up in finished_sandwiches.",
    "7-10": "7-10. Dream Vacation: Write a program that polls users about their dream vacation. Write a prompt similar to 'If you could visit one place in the world, where would you go?' Include a block of code that prints the results of the poll.",
    "8-1": "8-1. Message: Write a function called display_message() that prints one sentence telling everyone what you are learning about in this chapter. Call the function, and make sure the message displays correctly.",
    "8-2": "8-2. Favorite Book: Write a function called favorite_book() that accepts one parameter, title. The function should print a message, such as One of my favorite books is Alice in Wonderland. Call the function, making sure to include a book title as an argument in the function call.",
    "8-3": "8-3. T-Shirt: Write a function called make_shirt() that accepts a size and the text of a message that should be printed on the shirt. The function should print a sentence summarizing the size of the shirt and the message printed on it. Call the function once using positional arguments to make a shirt. Call the function a second time using keyword arguments.",
    "8-4": "8-4. Large Shirts: Modify the make_shirt() function so that shirts are large by default with a message that reads I love Python. Make a large shirt and a medium shirt with the default message, and a shirt of any size with a different message.",
    "8-5": "8-5. Cities: Write a function called describe_city() that accepts the name of a city and its country. The function should print a simple sentence, such as Reykjavik is in Iceland. Give the parameter for the country a default value. Call your function for three different cities, at least one of which is not in the default country.",
    "8-6": "8-6. City Names: Write a function called city_country() that takes in the name of a city and its country. The function should return a string formatted like this: 'Santiago, Chile'. Call your function with at least three city-country pairs, and print the value that’s returned.",
    "8-7": "8-7. Album: Write a function called make_album() that builds a dictionary describing a music album. The function should take in an artist name and an album title, and it should return a dictionary containing these two pieces of information. Use the function to make three dictionaries representing different albums. Print each return value to show that the dictionaries are storing the album information correctly. Use None to add an optional parameter to make_album() that allows you to store the number of songs on an album. If the calling line includes a value for the number of songs, add that value to the album’s dictionary. Make at least one new function call that includes the number of songs on an album.",
    "8-8": "8-8. User Albums: Start with your program from Exercise 8-7. Write a while loop that allows users to enter an album’s artist and title. Once you have that information, call make_album() with the user’s input and print the dictionary that’s created. Be sure to include a quit value in the while loop.",
    "8-9": "8-9. Messages: Make a list containing a series of short text messages. Pass the list to a function called show_messages(), which prints each text message.",
    "8-10": "8-10. Sending Messages: Start with a copy of your program from Exercise 8-9. Write a function called send_messages() that prints each text message and moves each message to a new list called sent_messages as it’s printed. After calling the function, print both of your lists to make sure the messages were moved correctly.",
    "8-11": "8-11. Archived Messages: Start with your work from Exercise 8-10. Call the function send_messages() with a copy of the list of messages. After calling the function, print both of your lists to show that the original list has retained its messages.",
    "8-12": "8-12. Sandwiches: Write a function that accepts a list of items a person wants on a sandwich. The function should have one parameter that collects as many items as the function call provides, and it should print a summary of the sandwich that’s being ordered. Call the function three times, using a different number of arguments each time.",
    "8-13": "8-13. User Profile: Start with a copy of user_profile.py from page 148. Build a profile of yourself by calling build_profile(), using your first and last names and three other key-value pairs that describe you.",
    "8-14": "8-14. Cars: Write a function that stores information about a car in a dictionary. The function should always receive a manufacturer and a model name. It should then accept an arbitrary number of keyword arguments. Call the function with the required information and two other name-value pairs, such as a color or an optional feature. Your function should work for a call like this one: car = make_car('subaru', 'outback', color='blue', tow_package=True) Print the dictionary that’s returned to make sure all the information was stored correctly.",
    "8-15": "8-15. Printing Models: Put the functions for the example printing_models.py in a separate file called printing_functions.py. Write an import statement at the top of printing_models.py, and modify the file to use the imported functions.",
    "8-16": "8-16. Imports: Using a program you wrote that has one function in it, store that function in a separate file. Import the function into your main program file, and call the function using each of these approaches: import module_name from module_name import function_name from module_name import function_name as fn import module_name as mn from module_name import *",
    "8-17": "8-17. Styling Functions: Choose any three programs you wrote for this chapter, and make sure they follow the styling guidelines described in this section.",      "9-1": "Restaurant: Make a class called Restaurant. The init() method for Restaurant should store two attributes: a restaurant_name and a cuisine_type. Make a method called describe_restaurant() that prints these two pieces of information, and a method called open_restaurant() that prints a message indicating that the restaurant is open. Make an instance called restaurant from your class. Print the two attributes individually, and then call both methods.",
    "9-1" : "9-1. Restaurant: Make a class called Restaurant. The __init__() method for Restaurant should store two attributes: a restaurant_name and a cuisine_type. Make a method called describe_restaurant() that prints these two pieces of information, and a method called open_restaurant() that prints a message indicating that the restaurant is open. Make an instance called restaurant from your class. Print the two attributes individually, and then call both methods.",
    "9-2": "9-2. Three Restaurants: Start with your class from Exercise 9-1. Create three different instances from the class, and call describe_restaurant() for each instance.",
    "9-3": "9-3. Users: Make a class called User. Create two attributes called first_name and last_name, and then create several other attributes that are typically stored in a user profile. Make a method called describe_user() that prints a summary of the user’s information. Make another method called greet_user() that prints a personalized greeting to the user. Create several instances representing different users, and call both methods for each user.",
    "9-4": "9-4. Number Served: Start with your program from Exercise 9-1. Add an attribute called number_served with a default value of 0. Create an instance called restaurant from this class. Print the number of customers the restaurant has served, and then change this value and print it again. Add a method called set_number_served() that lets you set the number of customers that have been served. Call this method with a new number and print the value again. Add a method called increment_number_served() that lets you increment the number of customers who’ve been served. Call this method with any number you like that could represent how many customers were served in, say, a day of business.",
    "9-5": "9-5. Login Attempts: Add an attribute called login_attempts to your User class from Exercise 9-3. Write a method called increment_login_attempts() that increments the value of login_attempts by 1. Write another method called reset_login_attempts() that resets the value of login_attempts to 0. Make an instance of the User class and call increment_login_attempts() several times. Print the value of login_attempts to make sure it was incremented properly, and then call reset_login_attempts(). Print login_attempts again to make sure it was reset to 0.",
    "9-6": "9-6. Ice Cream Stand: An ice cream stand is a specific kind of restaurant. Write a class called IceCreamStand that inherits from the Restaurant class you wrote in Exercise 9-1 or Exercise 9-4. Either version of the class will work; just pick the one you like better. Add an attribute called flavors that stores a list of ice cream flavors. Write a method that displays these flavors. Create an instance of IceCreamStand, and call this method.",
    "9-7": "9-7. Admin: An administrator is a special kind of user. Write a class called Admin that inherits from the User class you wrote in Exercise 9-3 or Exercise 9-5. Add an attribute, privileges, that stores a list of strings like 'can add post', 'can delete post', 'can ban user', and so on. Write a method called show_privileges() that lists the administrator’s set of privileges. Create an instance of Admin, and call your method.",
    "9-8": "9-8. Privileges: Write a separate Privileges class. The class should have one attribute, privileges, that stores a list of strings as described in Exercise 9-7. Move the show_privileges() method to this class. Make a Privileges instance as an attribute in the Admin class. Create a new instance of Admin and use your method to show its privileges.",
    "9-9": "9-9. Battery Upgrade: Use the final version of electric_car.py from this section. Add a method to the Battery class called upgrade_battery(). This method should check the battery size and set the capacity to 65 if it isn’t already. Make an electric car with a default battery size, call get_range() once, and then call get_range() a second time after upgrading the battery. You should see an increase in the car’s range.",
    "9-10": "9-10. Imported Restaurant: Using your latest Restaurant class, store it in a module. Make a separate file that imports Restaurant. Make a Restaurant instance, and call one of Restaurant’s methods to show that the import statement is working properly.",
    "9-11": "9-11. Imported Admin: Start with your work from Exercise 9-8. Store the classes User, Privileges, and Admin in one module. Create a separate file, make an Admin instance, and call show_privileges() to show that everything is working correctly.",
    "9-12": "9-12. Multiple Modules: Store the User class in one module, and store the Privileges and Admin classes in a separate module. In a separate file, create an Admin instance and call show_privileges() to show that everything is still working correctly.",
    "9-13": "9-13. Dice: Make a class Die with one attribute called sides, which has a default value of 6. Write a method called roll_die() that prints a random number between 1 and the number of sides the die has. Make a 6-sided die and roll it 10 times. Make a 10-sided die and a 20-sided die. Roll each die 10 times.",
    "9-14": "9-14. Lottery: Make a list or tuple containing a series of 10 numbers and 5 letters. Randomly select 4 numbers or letters from the list and print a message saying that any ticket matching these 4 numbers or letters wins a prize.",
    "9-15": "9-15. Lottery Analysis: You can use a loop to see how hard it might be to win the kind of lottery you just modeled. Make a list or tuple called my_ticket. Write a loop that keeps pulling numbers until your ticket wins. Print a message reporting how many times the loop had to run to give you a winning ticket.",
    "9-16": "9-16. Python Module of the Week: One excellent resource for exploring the Python standard library is a site called Python Module of the Week. Go to https://pymotw.com and look at the table of contents. Find a module that looks interesting to you and read about it, perhaps starting with the random module.",
    "10-1": "10-1. Learning Python: Open a blank file in your text editor and write a few lines summarizing what you’ve learned about Python so far. Start each line with the phrase In Python you can. . . . Save the file as learning_python.txt in the same directory as your exercises from this chapter. Write a program that reads the file and prints what you wrote two times: print the contents once by reading in the entire file, and once by storing the lines in a list and then looping over each line.",
    "10-2": "10-2. Learning C: You can use the replace() method to replace any word in a string with a different word. Here’s a quick example showing how to replace 'dog' with 'cat' in a sentence: Read in each line from the file you just created, learning_python.txt, and replace the word Python with the name of another language, such as C. Print each modified line to the screen",
    "10-3": "10-3. Simpler Code: The program file_reader.py in this section uses a temporary variable, lines, to show how splitlines() works. You can skip the temporary variable and loop directly over the list that splitlines() returns: for line in contents.splitlines(): Remove the temporary variable from each of the programs in this section, to make them more concise.",
    "10-4": "10-4. Guest: Write a program that prompts the user for their name. When they respond, write their name to a file called guest.txt.",
    "10-5": "10-5. Guest Book: Write a while loop that prompts users for their name. Collect all the names that are entered, and then write these names to a file called guest_book.txt. Make sure each entry appears on a new line in the file.",
    "10-6": "10-6. Addition: One common problem when prompting for numerical input occurs when people provide text instead of numbers. When you try to convert the input to an int, you’ll get a ValueError. Write a program that prompts for two numbers. Add them together and print the result. Catch the ValueError if either input value is not a number, and print a friendly error message. Test your program by entering two numbers and then by entering some text instead of a number.",
    "10-7": "10-7. Addition Calculator: Wrap your code from Exercise 10-5 in a while loop so the user can continue entering numbers, even if they make a mistake and enter text instead of a number.",
    "10-8": "10-8. Cats and Dogs: Make two files, cats.txt and dogs.txt. Store at least three names of cats in the first file and three names of dogs in the second file. Write a program that tries to read these files and print the contents of the file to the screen. Wrap your code in a try-except block to catch the FileNotFound error, and print a friendly message if a file is missing. Move one of the files to a different location on your system, and make sure the code in the except block executes properly",
    "10-9": "10-9. Silent Cats and Dogs: Modify your except block in Exercise 10-7 to fail silently if either file is missing.",
    "10-10": "10-10. Common Words: Visit Project Gutenberg (https://gutenberg.org) and find a few texts you’d like to analyze. Download the text files for these works, or copy the raw text from your browser into a text file on your computer. You can use the count() method to find out how many times a word or phrase appears in a string. For example, the following code counts the number of times 'row' appears in a string: >>> line = 'Row, row, row your boat' >>> line.count('row') 2 >>> line.lower().count('row') 3 Notice that converting the string to lowercase using lower() catches all appearances of the word you’re looking for, regardless of how it’s formatted. Write a program that reads the files you found at Project Gutenberg and determines how many times the word 'the' appears in each text. This will be an approximation because it will also count words such as 'then' and 'there'. Try counting 'the ', with a space in the string, and see how much lower your count is.",
    "10-11": "10-11. Favorite Number: Write a program that prompts for the user’s favorite number. Use json.dumps() to store this number in a file. Write a separate program that reads in this value and prints the message 'I know your favorite number! It’s _____.'",
    "10-12": "10-12. Favorite Number Remembered: Combine the two programs you wrote in Exercise 10-11 into one file. If the number is already stored, report the favorite number to the user. If not, prompt for the user’s favorite number and store it in a file. Run the program twice to see that it works.",
    "10-13": "10-13. User Dictionary: The remember_me.py example only stores one piece of information, the username. Expand this example by asking for two more pieces of information about the user, then store all the information you collect in a dictionary. Write this dictionary to a file using json.dumps(), and read it back in using json.loads(). Print a summary showing exactly what your program remembers about the user.",
    "10-14": "10-14. Verify User: The final listing for remember_me.py assumes either that the user has already entered their username or that the program is running for the first time. We should modify it in case the current user is not the person who last used the program. Before printing a welcome back message in greet_user(), ask the user if this is the correct username. If it’s not, call get_new_username() to get the correct username."
}
 
solutions:Dict[str,str] = {
    "2-1": "message:str='My name is Arman'\nprint(message)",
    "2-2": "message:str='I have completed Bachelor\\'s degree in Mathematics.'\nprint(message)\nnew_message:str=f'My name is Arman.{message}'\nprint(new_message)",
    "2-3": "person_Name:str='Arman'\npersonal_Message:str=f'Hello {person_Name} world you like to learn some Python today?'\nprint(personal_Message)",
    "2-4": "person_Name:str='Arman aShraf'\nprint(person_Name.lower())\nprint(person_Name.upper())\nprint(person_Name.title())",
    "2-5": "famous_person:str='Albert Einstein'\nfamous_quote:str='“A person who never made a mistake never tried anything new.”'\nprint(f'{famous_person} once said , {famous_quote}')",
    "2-6": "famous_person:str='Albert Einstein'\nfamous_quote:str=f'{famous_person} once said , “A person who never made a mistake never tried anything new.”'\nprint(famous_quote)",
    "2-7": "My_Name:str = '\tArman'\nprint(My_Name.lstrip())\nprint(My_Name.rstrip())\nprint(My_Name.strip())",
    "2-8": "file_Name:str='python_notes.txt'\nprint(file_Name.removesuffix('.txt'))" ,
    "2-9": "print(5+3)\nprint(11-3)\nprint(4*2)\nprint(16//2)",
    "2-10": "favorite_number:int=1\nfavorite_message:str=f'{favorite_number} is my favorite number'\nprint(favorite_message)",
    "2-11": "# Define variables for name and date.\n# my_name: str represents the name of the user.\n# today_date: str represents the current date.\nmy_name: str = 'Arman'\ntoday_date: str = '11 Feb 2024'\n\n# Print the name and date.\nprint(\"Name:\", my_name)\nprint(\"Date:\", today_date)",
    "2-12": "import this",
    "3-1": "names:list[str] = ['sameer','mazher','bilal']\nprint(names[0])\nprint(names[1])\nprint(names[2])",
    "3-2": "names:list[str] = ['sameer','mazher','bilal']\nprint(f'{names[0]} is my favorite friend.' )\nprint(f'{names[1]} is my favorite friend.' )\nprint(f'{names[2]} is my favorite friend.' )",
    "3-3": "favorite_transportation:list[str]=['motercycle','bus']\nprint(f'I have a {favorite_transportation[0]}')\nprint(f'Fair of {favorite_transportation[1]} is low reletive to the car')",
    "3-4": "names:list[str] = ['sameer','mazher','bilal']\nprint(f'Dear {names[0]} ,You are invited to dinner. Please join us for a wonderful evening.' )\nprint(f'Dear {names[1]},You are invited to dinner. Please join us for a wonderful evening.')\nprint(f'Dear {names[2]}  ,You are invited to dinner. Please join us for a wonderful evening.')",
    "3-5": "names:list[str] = ['sameer','mazher','bilal']\nprint(f'Dear {names[0]} ,You are invited to dinner. Please join usor a wonderful evening.' )\nprint(f'Dear {names[1]},You are invited to dinner. Please join us for wonderful evening.')\nprint(f'Dear {names[2]}  ,You are invited to dinner. Please join us for aonderful evening.')\ndeleted:str=names.pop(1)\nprint(f'Sorry {deleted} can\\'t make it to dinner')\nnames.insert(1,'arman')\nprint(f'Dear {names[0]} ,You are invited to dinner. Please jn us for a wonderful evening.')\nprint(f'Dear {names[1]},You are invited to dinner. Please joius for a wonderful evening.')\nprint(f'Dear {names[2]}  ,You are invited to dinner. Please join  for a wonderful evening.')\nnames.insert(0,'ashraf')\nnames.insert(len(names)//2, 'zaman')\n\nnames.append('usman')\nprint(f'Dear {names[0]} ,You are invited to dinner. Please join us for a wondeul evening.')\nprint(f'Dear {names[1]},You are invited to dinner. Please join us for a wonderfulvening.')\nprint(f'Dear {names[2]}  ,You are invited to dinner. Please join us for a wonderful evening.')\nprint(f'Dear {names[3]} ,You are invited to dinner. Please join us for a wonderful evening.')\nprint(f'Dear {names[4]},You are invited to dinner. Please join us for a wonderful evening.')\nprint(f'Dear {names[5]}  ,You are invited to dinner. Please join us for a wonderful evening.')\nprint(names)",
    "3-6": "names:list[str] = ['sameer','mazher','bilal']\nprint(f'Dear {names[0]} ,You are invited to dinner. Please join us for a wonderful evening.' )\nprint(f'Dear {names[1]},You are invited to dinner. Please join us for a wonderful evening.')\nprint(f'Dear {names[2]}  ,You are invited to dinner. Please join us for a wonderful evening.')\ndeleted:str=names.pop(1)\nprint(f'Sorry {deleted} can\\'t make it to dinner')\nnames.insert(1,'arman')\nprint(f'Dear {names[0]} ,You are invited to dinner. Please join us for a wonderful evening.')\nprint(f'Dear {names[1]},You are invited to dinner. Please join us for a wonderful evening.')\nprint(f'Dear {names[2]}  ,You are invited to dinner. Please join us for a wonderful evening.')\nnames.insert(0,'ashraf')\nnames.insert(len(names)//2, 'zaman')\n\nnames.append('usman')\nprint(f'Dear {names[0]} ,You are invited to dinner. Please join us for a wonderful evening.')\nprint(f'Dear {names[1]},You are invited to dinner. Please join us for a wonderful evening.')\nprint(f'Dear {names[2]}  ,You are invited to dinner. Please join us for a wonderful evening.')\nprint(f'Dear {names[3]} ,You are invited to dinner. Please join us for a wonderful evening.')\nprint(f'Dear {names[4]},You are invited to dinner. Please join us for a wonderful evening.')\nprint(f'Dear {names[5]}  ,You are invited to dinner. Please join us for a wonderful evening.')\nprint(names)",
    "3-7": "names:list[str] = ['sameer','mazher','bilal']\nprint(f'Dear {names[0]} ,You are invited to dinner. Please join us for a wonderful evening.' )\nprint(f'Dear {names[1]},You are invited to dinner. Please join us for a wonderful evening.')\nprint(f'Dear {names[2]}  ,You are invited to dinner. Please join us for a wonderful evening.')\ndeleted:str=names.pop(1)\nprint(f'Sorry {deleted} can\\'t make it to dinner')\nnames.insert(1,'arman')\nprint(f'Dear {names[0]} ,You are invited to dinner. Please join us for a wonderful evening.')\nprint(f'Dear {names[1]},You are invited to dinner. Please join us for a wonderful evening.')\nprint(f'Dear {names[2]}  ,You are invited to dinner. Please join us for a wonderful evening.')\nnames.insert(0,'ashraf')\nnames.insert(len(names)//2, 'zaman')\n\nnames.append('usman')\nprint(f'Dear {names[0]} ,You are invited to dinner. Please join us for a wonderful evening.')\nprint(f'Dear {names[1]},You are invited to dinner. Please join us for a wonderful evening.')\nprint(f'Dear {names[2]}  ,You are invited to dinner. Please join us for a wonderful evening.')\nprint(f'Dear {names[3]} ,You are invited to dinner. Please join us for a wonderful evening.')\nprint(f'Dear {names[4]},You are invited to dinner. Please join us for a wonderful evening.')\nprint(f'Dear {names[5]}  ,You are invited to dinner. Please join us for a wonderful evening.')\nprint('we can invite only two people')\n\ncount:int=len(names)-1\n\nwhile count>=2:\n      deleteditem:str=names.pop()\n      print(f'Sorry {deleteditem}, you are not invited')\n      count-=1\nprint(f'Dear {names[0]} ,You are invited to dinner. Please join us for a wonderful evening.')\nprint(f'Dear {names[1]},You are invited to dinner. Please join us for a wonderful evening.')\ndel names[0]\ndel names[0]\n\nprint(names)",
    "3-8": "fav_places:list[str]=['lahore','itlay','france','islambad','new York']\nprint('Original Order')\nprint(fav_places)\nprint(sorted(fav_places))\nprint(fav_places)\nprint(sorted(fav_places,reverse=True))\nprint(fav_places)\nfav_places.reverse()\nprint(fav_places)\nfav_places.reverse()\nprint(fav_places)\nfav_places.sort()\nprint(fav_places)\nfav_places.sort(reverse=True)\nprint(fav_places)",
    "3-9": "total_guest:list[str] = ['ali', 'asad','ahmad']\ntotal_length:int = len(total_guest)\nprint(f'Total guest are {total_length}')",
    "3-10": "five_places = ['Italy', 'Dubai', 'Pakistan', 'Makkah', 'California']\n\nprint(\"Original List:\", five_places)\nfive_places.append('New York')\nprint(\"Appended 'New York':\", five_places)\nfive_places.insert(1, 'Paris')\nprint(\"Inserted 'Paris':\", five_places)\nfive_places.remove('Dubai')\nprint(\"Removed 'Dubai':\", five_places)\npopped_in_five_places = five_places.pop(3)\nprint(\"Popped item at index 3:\", popped_in_five_places)\nindex = five_places.index('Pakistan')\nprint(\"Index of 'Pakistan':\", index)\ncount = five_places.count('Italy')\nprint(\"Count of 'Italy':\", count)\nfive_places.sort()\nprint(\"Sorted List:\", five_places)\nfive_places.reverse()\nprint(\"Reversed List:\", five_places)\ncopy_of_five_places = five_places.copy()\nprint(\"Copy of List:\", copy_of_five_places)\nfive_places.clear()\nprint(\"Cleared List:\", five_places)\nfive_places.extend(['France', 'Spain'])\nprint(\"Extended List:\", five_places)",
    "3-11": "numbers:list[int] = [1, 2, 3, 4, 5]\n\ntry:\n    print(numbers[1])\nexcept IndexError:\n    print(\"IndexError: Index is out of range\")",
    "4-1": "my_favorite_pizza:list[str] = ['pizza1','pizza2', 'pizza3']\nfor pizza in my_favorite_pizza:\n     print(f' {pizza}')\n     print(f'My favourite pizza {pizza} and i like it very much')\nprint(\"\\nI really love pizza!\")",
    "4-2": "animals_list:list[str] = ['cat', 'dog', 'bear']\n\nfor animal in animals_list:\n    print(animal)\n    print(f'A {animal} would make a great pet.')\n\nprint('Any of these animals would make a great pet!')",
    "4-3": "for num in range(1,21):\n    print(num)",
    "4-4": "for one_million in range(1,1000001):\n    print(one_million)",
    "4-5": "list_of_one_million:list[int] = list(range(1, 1000001))\ntotal:int = sum(list_of_one_million)\nminimum:int = min(list_of_one_million)\nmaximum:int = max(list_of_one_million)\n\nprint(f'The sum of the numbers from 1 to 1,000,000 is {total}.')\nprint(f'The minimum number in the range 1 to 1,000,000 is {minimum}.')\nprint(f'The maximum number in the range 1 to 1,000,000 is {maximum}.')",
    "4-6": "odd_list:list[int] = list(range(1,21,2))\nfor odd_num in odd_list:\n    print(f'Odd number is {odd_num}')",
    "4-7": "multiple_of_three: list[int] = list(range(3,31,3))\nfor i in multiple_of_three:\n    print(i)",
    "4-8": "for cube in range(1,11):\n    print(f'Cube of {cube} is {cube**3}')",
    "4-9": "list_of_cubes :list[int] = [cube**3 for cube in range(1,11)]\nprint(list_of_cubes)",
    "4-10": "list_of_even : list[int]=list(range(2,28,2))\nprint(list_of_even)\nprint(f'First three items  {list_of_even[:3]}')\n\nprint(f'Middle of the three items {list_of_even[len(list_of_even)//2-1:len(list_of_even)//2+2]}')\nprint(f'Last of the three items {list_of_even[len(list_of_even)-3:len(list_of_even)]}')",
    "4-11": "my_foods:list[str] = ['pizza', 'falafel', 'carrot cake']\nfriend_pizzas:list[str] = my_foods[:]\nmy_foods.append('new pizza')\nfriend_pizzas.append('friend new pizza')\nprint('\\nmy favorite pizzas are:')\nfor my_food in my_foods:\n    print(f'-{my_food}')\nprint(\"\\nMy friend's favorite pizzas are:\")\nfor friend_pizza in friend_pizzas:\n    print(f'-{friend_pizza}')",
    "4-12": "fruits:list[str] = [\"apple\", \"banana\", \"cherry\"]\nvegetables:list[str] = [\"carrot\", \"lettuce\", \"onion\"]\nprint(\"Fruits:\")\nfor fruit in fruits:\n    print(fruit)\n\nprint(\"\\nVegetables:\")\nfor vegetable in vegetables:\n    print(vegetable)",
    "4-13": "menu1:tuple[str,str,str,str,str] = ('burger', 'pizza', 'pasta', 'salad', 'ice cream')\n\nprint(\"Original Menu:\")\nfor food in menu1:\n    print(food)\n# menu[2]:str = 'sushi'\n\nmenu2:tuple[str,str,str,str,str] = ('burger', 'pizza', 'sushi', 'fruit salad', 'cake')\n\nprint(\"\\nRevised Menu:\")\nfor food in menu2:\n    print(food)",
    "5-1": "car:str = 'subaru'\nprint('Is car == subaru? I predict True.')\nprint(car == 'subaru')\nprint('Is car == audi? I predict False.')\nprint(car == 'audi')\n\nmy_name:str = 'arman'\nprint('Is my_name == arman? I predict True.')\nprint(my_name == 'arman')\nprint('Is my_name == armans? I predict false.')\nprint(my_name == 'armans')\n\nmy_city:str = 'sialkot'\nprint('Is my_city == sialkot? I predict True.')\nprint(my_city == 'sialkot')\nprint('Is my_city == sialkott? I predict false.')\nprint(my_city == 'sialkott')\n\nmy_country:str = 'pakistan'\nprint('Is my_country == pakistan? I predict True.')\nprint(my_country == 'pakistan')\nprint('Is my_country == pakistann? I predict false.')\nprint(my_country == 'pakistann')\n\ncurrent_prime_minister:str = 'anwar ul haq'\nprint('Is current_prime_minister == anwar ul haq? I predict True.')\nprint(current_prime_minister == 'anwar ul haq')\nprint('Is current_prime_minister == anwar ul haqq? I predict false.')\nprint(current_prime_minister == 'anwar ul haqq')\n\nmy_age:int = 22\nprint('Is my_age == 22 ? I predict True.')\nprint(my_age == 22)\nprint('Is my_age == 22 ? I predict True.')\nprint(my_age == 22)",
    "5-2": "name:str = 'Arman'\nfather_name:str = 'Ashraf'\nage:int = 22\nheight:int = 6\npasstest:bool = True\nfailtest:bool = False\n\nprint(name == 'Arman')\nprint(name == 'arman')\nprint(name != 'arman')\nprint(name != 'Arman')\nprint(name.lower() == 'arman')\nprint(name.lower() == 'Arman')\nprint(age == height)\nprint(age < height)\nprint(age > height)\nprint(age != height)\nprint(age <= height)\nprint(age >= height)\nprint(passtest and failtest)\nprint(passtest or failtest)\n\nfriend_list:list[str] = ['sameer', 'ali', 'bilal']\nprint('sameer' in friend_list)\nprint('ahmad' in friend_list)\nprint('asif' not in friend_list)\nprint('bilal' not in friend_list)",
    "5-3": "alien_color:str= 'green'\nif alien_color == 'green':\n    print('You just earned 5 points!')",
    "5-4": "alien_color:str = 'yellow'\n\nif alien_color == 'green':\n    print('You just earned 5 points!')\n\nelse:\n    print('You just earned 10 points')",
    "5-5": "alien_color:str = 'red'\nif alien_color == 'green':\n    print('You just earned 5 points')\nelif(alien_color == 'yellow'):\n    print('you just earned 10 points')\nelif(alien_color == 'red'):\n    print('you just earned 15 points')",
    "5-6": "age:int = 18\n\nif age < 2:\n    print('You\\'re a baby!')\nelif age < 4:\n    print('You\\'re a toddler!')\nelif age < 13:\n    print('You\\'re a kid!')\nelif age < 20:\n    print('You\\'re a teenager!')\nelif age < 65:\n    print('You\\'re an adult!')\nelse:\n    print('You\\'re an elder!')",
    "5-7": "favorite_fruits:list[str] = ['blueberries', 'apples', 'peaches']\n\nif ('bananas' in favorite_fruits):\n    print('You really like bananas!')\nif ('apples' in favorite_fruits):\n    print('You really like apples!')\nif ('blueberries' in favorite_fruits):\n    print('You really like blueberries!')\nif ('kiwis' in favorite_fruits):\n    print('You really like kiwis!')\nif ('peaches' in favorite_fruits):\n    print('You really like peaches!')",
    "5-8": "usernames:list[str] = ['ali', 'arman', 'admin', 'usman', 'asad']\n\nfor username in usernames:\n    if username == 'admin':\n        print('Hello admin, would you like to see a status report?')\n    else:\n        print(f'Hello {username }, thank you for logging in again!')",
    "5-9": "usernames:list[str] = ['ali', 'arman', 'admin', 'usman', 'asad']\n# usernames:list[None|str] = []\n \nif usernames:\n    for username in usernames:\n        if username == 'admin':\n            print('Hello admin, would you like to see a status report?')\n        else:\n            print(f'Hello {username}, thank you for logging in again!')\nelse:\n    print('We need to find some users!')",
    "5-10": "current_users:list[str] = ['ali','asad','zain','arman','arman']\nnew_users:list[str] = ['ali','Asad','saad','sameer','mazher']\ncurrent_users_lower:list[None|str] = [user.lower() for user in current_users]\n\nfor new_user in new_users:\n    if new_user.lower() in current_users_lower:\n        print(f'{new_user} is already taken. You will need to enter a new username.')\n    else:\n        print(f'{new_user} is available.')",
    "5-11": "numbers:list[int] = list(range(1,10))\n\nfor number in numbers:\n    if number == 1:\n        print('1st')\n    elif number == 2:\n        print('2nd')\n    elif number == 3:\n        print('3rd')\n    else:\n        print(str(number) + 'th')",
    "6-1": "from typing import Dict\n\nbio_data:Dict[str,str|int] = {'first_name': 'Arman', 'last_name': 'Muhammad Ashraf', 'age': 22, 'city': 'sialkot'}\nfor key, value in bio_data.items():\n    print(f'{key}: {value}')",
    "6-2": "from typing import Dict\n\nfavorite_numbers:Dict[str,int] = {'ali': 1, 'ahmad': 2, 'asad': 3, 'usman': 4, 'arman': 5}\nfor name, number in favorite_numbers.items():\n    print(f'{name} favorite number is {number}')",
    "6-3": "from typing import Dict\n\nfive_programming_words:Dict[str,str] = {'get': 'get is used to get the item from the dictionary if not exist it gives none', 'set': 'Set is a data type one point is noted that set is mutable but its elements are immutable', 'Dict': 'Dict is just like a JavaScript Object for understanding', 'key': 'In Dictionary Key must be unique and immutable', 'value': 'In Dictionary Value may be list, tuple ...'}\nfor word, meaning in five_programming_words.items():\n  print(f'{word}:  {meaning}')",
    "6-4": "from typing import Dict\n\nfive_programming_words:Dict[str,str] = {'get': 'get is used to get the item from the dictionary if not exist it gives none', 'set': 'Set is a data type one point is noted that set is mutable but its elements are immutable', 'Dict': 'Dict is just like a JavaScript Object for understanding', 'key': 'In Dictionary Key must be unique and immutable', 'value': 'In Dictionary Value may be list, tuple ...', 'if': 'for condition checking', 'loop': 'iteration', 'continue': 'skipping the value in loop', 'break': 'loop end', 'function': 'cde again and again use in our code'}\nfor word, meaning in five_programming_words.items():\n    print(f'{word}:  {meaning}')",
    "6-5": "from typing import Dict\n\nrivers:Dict[str,str] = {'nile': 'egypt', 'mississippi': 'united states', 'fraser': 'canada', 'kuskokwim': 'alaska', 'yangtze': 'china'}\nfor river, country in rivers.items():\n    print(f'The {river.upper()} runs through {country.title()}')\nprint('The following rivers are included in this data set:')\nfor river in rivers.keys():\n    print(f'- {river.title()}')\nprint('The following countries are included in this data set:')\nfor country in rivers.values():\n    print(f'- {country.title()}')",
    "6-6": "from typing import Dict\n\nfavorite_languages:Dict[str,str] = {'jen': 'python', 'sarah': 'c', 'edward': 'rust', 'phil': 'python'}\npeople_list:list[str] = ['jen', 'sarah', 'ali', 'zain', 'asad']\nfor people in people_list:\n    if people in favorite_languages.keys():\n        print(f'Thank you, {people}, for polling us.')\n    else:\n        print(f'{people}, what\\'s your favorite language?')",
    "6-7": "from typing import Dict\n\nbio_data0:Dict[str,str|int] = {'first_name': 'Arman', 'last_name': 'Muhammad Ashraf', 'age': 22, 'city': 'sialkot'}\nbio_data1:Dict[str,str|int] = {'first_name': 'zaman', 'last_name': 'Muhammad Ashraf', 'age': 32, 'city': 'sialkot'}\nbio_data2:Dict[str,str|int] = {'first_name': 'usman', 'last_name': 'Muhammad Ashraf', 'age': 26, 'city': 'sialkot'}\nlist_bio_data:list[Dict[str,str]] = [bio_data0, bio_data1, bio_data2]\nfor single_value in list_bio_data:\n    for bio_key, bio_data in single_value.items():\n        print(f'{bio_key} :{bio_data}')\n    ",
    "6-8": "from typing import Dict\n\npet_1:Dict[str,str] = {'animal': 'animal_1', 'owner_name': 'x'}\npet_2:Dict[str,str] = {'animal': 'animal_2', 'owner_name': 'y'}\npet_3:Dict[str,str] = {'animal': 'animal_3', 'owner_name': 'z'}\npet_4:Dict[str,str] = {'animal': 'animal_4', 'owner_name': 'a'}\npet_list:list[Dict[str,str]] = [pet_1, pet_2, pet_3, pet_4]\nfor item in pet_list:\n    print(f'This pet is a {item['animal']} and the owner\\'s name is {item['owner_name']}.')",
    "6-9": "from typing import Dict\n\nfavorite_places:Dict[str,list[str]] = {'ali': ['lahore', 'sialkot', 'multan'], 'arman': ['islamabad', 'karachi', 'johar town'], 'asad': ['murree', 'gujrat', 'sargodha']}\nfor name, places in favorite_places.items():\n    print(f'Welcome to {name} and your favorite places are: ')\n    for place in places:\n        print(f' -{place}')",
    "6-10": "from typing import Dict\n\nfavorite_numbers:Dict[str,list[int]] = {'ali': [1, 2], 'ahmad': [2, 3], 'asad': [3, 4], 'usman': [4, 5], 'arman': [5, 6]}\nfor name, favorite_number in favorite_numbers.items():\n    print(f'{name} favorite number are')\n    for num in favorite_number:\n        print(f'_{num}')",
    "6-11": "from typing import Dict\n\ncities:Dict[str,Dict[str,str|int]] = {'sialkot': {'country': 'pakistan', 'population': 10, 'nearby mountains': 'k2'}, 'lahore': {'country': 'pakistan', 'population': 876, 'nearby mountains': 'k2'}, 'islamabad': {'country': 'pakistan', 'population': 20, 'nearby mountains': 'k2'}}\nfor city, city_info in cities.items():\n    print(f\"{city.title()} is in {city_info['country'].title()}.\")\n    print(f\"  It has a population of about {city_info['population']}.\")\n    print(f\"  The {city_info['nearby mountains'].title()} mounats are nearby.\")",
    "6-12": "from typing import Dict\n\nprevious_obj:Dict[str,str|int] = {'name': 'arman'}\nprevious_obj['name'] = 'M arman'\nprevious_obj['age']  = 22\nprint(previous_obj)",
    "7-1": "rental_car:str = input('What kind of car would you like? ')\nprint(f\"Let me see if I can find you a {rental_car.title()}.\")",
    "7-2": "seating:int = int(input('How many people are in your dinner party tonight? '))\nif seating > 8:\n    print(\"I'm sorry, you'll have to wait for a table.\")\nelse:\n    print(\"Your table is ready.\")",
    "7-3": "multiples:int = int(input('Give me a number, please: '))\nif multiples % 10 == 0:\n    print(f'{multiples} is a multiple of 10.')\nelse:\n    print(f'{multiples} is not a multiple of 10.')",
    "7-4": "prompt:str = \"What topping would you like on your pizza?\"\nprompt += \"Enter 'quit' when you are finished: \"\n\nwhile True:\n    pizza_topping:str = input(prompt)\n    if pizza_topping != 'quit':\n        print(f'I\\'ll add {pizza_topping} to your pizza.')\n    else:\n        break",
    "7-5": "age_prompt:str = 'How old are you? '\nage_prompt += \"Enter \\'quit\\' when you are finished.\"\n\nwhile True:\n    age:str = input(age_prompt)\n    if age == 'quit':\n        break\n    age:int = int(age)\n    if age < 3:\n        print('You get in free!')\n    elif age < 13:\n        print('Your ticket is $10.')\n    else:\n        print('Your ticket is $15.')",
    "7-6": "flag:bool = True\nwhile flag:\n    pizza_topping:str = input('What topping would you like on your pizza? ')\n    if pizza_topping != 'quit':\n        print(f'Adding {pizza_topping} to your pizza.')\n    else:\n        flag = False",
    "7-7": "n:int = 2\nwhile n < 4:\n    print(n)",
    "7-8": "from typing import Optional\n\nsandwich_orders:list[str] = ['sandwich_1', 'sandwich_2', 'sandwich_3']\nfinished_sandwiches:list[Optional[str]] = []\n\nwhile sandwich_orders:\n    current_sandwich:str|None = sandwich_orders.pop()\n    print(f'I made your {current_sandwich} sandwich.')\n    finished_sandwiches.append(current_sandwich)\n\nprint('Here are the sandwiches made:')\nfor sandwich in finished_sandwiches:\n    print(sandwich)",
    "7-9": "from typing import Optional\n\nsandwich_orders:list[str] = ['pastrami', 'turkey', 'pastrami', 'ham', 'pastrami', 'roast beef', 'chicken', 'pastrami']\nsandwich_finished:list[Optional[str]] = []\n\nprint('Sorry, the deli has run out of pastrami.')\n\nwhile 'pastrami' in sandwich_orders:\n    sandwich_orders.remove('pastrami')\n\nwhile sandwich_orders:\n    removed:str|None = sandwich_orders.pop()\n    sandwich_finished.append(removed)\n\nprint('List of Finished Sandwiches:')\nfor sandwich in sandwich_finished:\n    print(sandwich)",
    "7-10": "from typing import Optional,Dict\n\nresponses:Dict[Optional[str],Optional[str]] = {}\nwhile True:\n    name:str = input(\"What's your name? \")\n    place:str = input(\"If you could visit one place in the world, where would it be? \")\n    responses[name]= place\n    repeat:str = input(\"Would you like to let someone else respond? (yes/no) \")\n    if repeat != 'yes':\n        break\nprint(\"--- Results ---\")\nfor name, place in responses.items():\n    print(f\"{name.title()} would like to visit {place.title()}.\")",
   "8-1": "def display_message()->None:\n    print('I am learning python')\n\ndisplay_message()",
    "8-2": "def favorite_book(title: str) -> None:\n    print(f'One of my favorite books is {title}')\n\nfavorite_book('Alice in Wonderland')",
    "8-3": "def make_shirt(size: int, msg: str) -> None:\n    print(f'I have a {msg} shirt whose size is {size}')\n\nmake_shirt(36, 'very nice')\nmake_shirt(size=36, msg='very nice')\nmake_shirt(msg='very nice', size=36)",
    "8-4": "def make_shirt(size: str = 'large', msg: str = 'I love Python') -> None:\n    print(f'{msg} shirt whose size is {size}')\n\nmake_shirt()\nmake_shirt(size='medium')\nmake_shirt('Normal', 'I love so much Python')",
    "8-5": "def describe_city(name: str, country: str = 'Pakistan') -> None:\n    print(f'{name} is in {country}')\n\ndescribe_city('Sialkot')\ndescribe_city('Karachi', 'Islamic Republic of Pakistan')\ndescribe_city('Islamabad')",
    "8-6": "def city_country(city_name: str, country: str) -> str:\n    return f'{city_name}, {country}'\n\nprint(city_country('Islamabad', 'Pakistan'))\nprint(city_country('Paris', 'France'))",
    "8-7": "from typing import Dict\n\ndef make_album(artist_name: str, album_title: str, tracks: int = 0) -> Dict[str, str|int]:\n    album_info: Dict[str, str|int] = {'artist': artist_name, 'title': album_title}\n    if tracks:\n        album_info['tracks'] = tracks\n    return album_info\n\nalbum1 = make_album('ali', 'i am ali')\nprint(album1)\nalbum2 = make_album('zain', 'i am zain')\nprint(album2)\nalbum3 = make_album('saad', 'i am saad', 20)\nprint(album3)",
    "8-8": "from typing import Dict,Optional\n\nempty_dict: Dict[Optional[str], Optional[str]] = {}\n\nwhile True:\n    artist_input:str = input('Please enter the name of the artist: ')\n    if artist_input.lower() == 'quit':\n        break\n    title_input:str = input('Please enter the title of the album: ')\n    if title_input.lower() == 'quit':\n        break\n    output = make_album(artist_input, title_input)\n    print(output)\n\nprint('\\nThanks for responding!')",
    "8-9": "def show_messages(messages: list[str]) -> None:\n    for msg in messages:\n        print(msg)\n\nmessages:list[str] = ['My name is arman', 'I am 22 years old']\nshow_messages(messages)",
    "8-10": "from typing import Optional\n\ndef send_messages(messages: list[str]) -> list[Optional[str]]:\n    sent_messages: list[Optional[str]] = []\n    while messages:\n        msg:str = messages.pop()\n        sent_messages.append(msg)\n        print(f'sending message {msg}')\n    return sent_messages\n\nmessages:list[str] = ['My name is arman', 'I am 22 years old', 'I am from Pakistan']\nsent_messages = send_messages(messages)\nprint(sent_messages)\nprint(messages)",
    "8-11": "from typing import Optional\n\ndef send_messages(messages: list[str]) -> list[Optional[str]]:\n    sent_messages: list[Optional[str]] = []\n    while messages:\n        msg:str = messages.pop()\n        sent_messages.append(msg)\n        print(f'sending message {msg}')\n    return sent_messages\n\nmessages:list[str] = ['My name is arman', 'I am 22 years old', 'I am from Pakistan']\nsent_messages = send_messages(messages[:])\nprint(sent_messages)\nprint(messages)",
    "8-12": "def make_sandwich(*items: str) -> None:\n    print('\\nI\\'ll make you a great sandwich:')\n    for item in items:\n        print(f'  ...adding {item} to your sandwich.')\n    print('Your sandwich is ready!')\n\nmake_sandwich('roast beef', 'cheddar cheese', 'lettuce', 'honey dijon')\nmake_sandwich('turkey', 'apple slices', 'honey mustard')\nmake_sandwich('peanut butter', 'strawberry jam')",
    "8-13": "from typing import Dict\n\n\ndef build_profile(first: str, last: str, **user_info: str) -> Dict[str, str]:\n    user_info['first_name'] = first\n    user_info['last_name'] = last\n    return user_info\n\nuser_profile = build_profile('arman', 'ashraf',\n                             location='Pakistan',\n                             field='mathematics')\nprint(user_profile)",
    "8-14": "from typing import Dict\n\n\ndef make_car(manufacturer: str, model: str, **car_info:str|int|bool) -> Dict[str, str|int|bool]:\n    car: Dict[str, str|int|bool] = {'manufacturer': manufacturer, 'model': model}\n    for key, value in car_info.items():\n        car[key] = value\n    return car\n\ncar = make_car('subaru', 'outback', color='blue', tow_package=True)\nprint(car)\ncar1 = make_car('subaru', 'outback', color='white', tow_package=True)\nprint(car1)\ncar2 = make_car('honda', 'accord', year=1991, color='white', headlights='popup')\nprint(car2)",
    "8-15": " # This is a printing_function.py file and uncomment import statment \ndef print_models(unprinted_designs:list[str], completed_models:list[str]):\n    while unprinted_designs:\n        current_design = unprinted_designs.pop() \n        print(f'Printing model: {current_design}')\n        completed_models.append(current_design)\n\n\ndef show_completed_models(completed_models): \n    print(\"\\nThe following models have been printed:\")\n    for completed_model in completed_models:\n        print(completed_model)\nfrom typing import Optional\n#import printing_functions as pf\n\nunprinted_designs:list[str] = ['iphone case', 'robot pendant', 'dodecahedron']\ncompleted_models:list[Optional[str]] = []\n\npf.print_models(unprinted_designs, completed_models)\npf.show_completed_models(completed_models)",
    "8-16": "# This is summodule.py file and uncomment the import statment \ndef sum_fun(par1, *num:int) -> int:\n    return sum(list(num), par1)\ndef max_fun(*num:int) -> int:\n    return max(list(num))\ndef this_function_find_the_minimum_value_in_the_list(*num:int) -> int:\n    return min(list(num))\n#This is a multiplymodule.py file \ndef mult_fun(par1:int,part2:int)->int:\n    return  par1*part2  \n#import summodule\n#from summodule import sum_fun\n#from summodule import this_function_find_the_minimum_value_in_the_list as minfun\n#import multiplymodule as mp\n#from summodule import *\n\nfind_max:int=summodule.max_fun(2,3,4,5)\nprint(find_max)\n\nfind_sum:int=summodule.sum_fun(2,3,4,5)\nprint(find_sum)\n\nmin_funs:int=minfun(2,3,4,5)\nprint(min_funs)\n\nmin_funs:int=mp.mult_fun(4,5)\nprint(min_funs)\n\nmax_funs:int=max_fun(4,5)\nprint(max_funs)",
    "8-17": "#Here are some general guidelines you can follow to ensure your programs adhere to styling conventions:\n\n#Indentation: Use 4 spaces for indentation. Avoid tabs.\n#Line Length: Limit lines to 79 characters to ensure readability.\n#Whitespace: Use whitespace appropriately to improve readability. Separate functions and classes with two blank lines.\n#Use blank lines sparingly within functions to group related code.\n#Naming Conventions: Use snake_case for function and variable names. Use ALL_CAPS for constants. Use CamelCase for class names.\n#Comments: Use descriptive comments to explain the purpose of functions, classes, and complex code blocks. Keep comments concise and up-to-date.\n#Imports: Group imports into three sections: standard library imports, related third-party imports, and local application/library specific imports. Separate each section with a blank line. Avoid using wildcard imports (from module import *).\n#Function Length: Aim for short and focused functions. If a function is too long or complex, consider breaking it up into smaller functions.\n#Docstrings: Include docstrings for all functions, classes, and modules to describe their purpose, arguments, and return values. Follow the Google Python Style Guide for docstring formatting.\n#Docstrings, short for 'documentation strings,' are string literals that appear as the first statement in a module, function, class, or method definition. They are used to provide documentation about the purpose, usage, and behavior of the code entity they are associated with.\n\n#Docstrings serve as a form of inline documentation that helps developers understand how to use and interact with the code. They provide a concise summary of what the code does, its parameters, return values, and any other relevant information.",
    "9-1": "class Restaurant:\n    def __init__(self, restaurant_name:str, cuisine_type:str)->None:\n        self.restaurant_name = restaurant_name\n        self.cuisine_type = cuisine_type\n    def describe_restaurant(self)->None:\n        print(f'The restaurant\\'s name is {self.restaurant_name}.')\n        print(f'The cuisine type is {self.cuisine_type}.')\n    def open_restaurant(self)->None:\n        print(f'{self.restaurant_name} is now open!')\nrestaurant:Restaurant = Restaurant('The Great Delight', 'Italian')\nprint('Restaurant Name:', restaurant.restaurant_name)\nprint('Cuisine Type:', restaurant.cuisine_type)\nrestaurant.describe_restaurant()\nrestaurant.open_restaurant()",
    "9-2": "class Restaurant:\n    def __init__(self, restaurant_name:str, cuisine_type:str)->None:\n        self.restaurant_name = restaurant_name\n        self.cuisine_type = cuisine_type\n    def describe_restaurant(self)->None:\n        print(f'The restaurant\\'s name is {self.restaurant_name}.')\n        print(f'The cuisine type is {self.cuisine_type}.')\n    def open_restaurant(self)->None:\n        print(f'{self.restaurant_name} is now open!')\nrestaurant1:Restaurant = Restaurant('Food Palace', 'Chinese')\nrestaurant2:Restaurant = Restaurant('The Sizzler', 'Steakhouse')\nrestaurant3:Restaurant = Restaurant('Pizza Planet', 'Pizza')\nrestaurant1.describe_restaurant()\nrestaurant2.describe_restaurant()\nrestaurant3.describe_restaurant()",
    "9-3": "class User:\n    def __init__(self, first_name:str, last_name:str, age:int, gender:str, email:str)->None:\n        self.first_name = first_name\n        self.last_name = last_name\n        self.age = age\n        self.gender = gender\n        self.email = email\n    def describe_user(self)->None:\n        print(f'User Information:\\nFirst Name: {self.first_name}\\nLast Name: {self.last_name}\\nAge: {self.age}\\nGender: {self.gender}\\nEmail: {self.email}')\n    def greet_user(self)->None:\n        print(f'Hello, {self.first_name}! Welcome back.')\nuser1:User = User('John', 'Doe', 30, 'Male', 'john@example.com')\nuser2:User = User('Jane', 'Smith', 25, 'Female', 'jane@example.com')\nuser3:User = User('Alice', 'Johnson', 40, 'Female', 'alice@example.com')\nuser1.describe_user()\nuser1.greet_user()\nuser2.describe_user()\nuser2.greet_user()\nuser3.describe_user()\nuser3.greet_user()",
    "9-4": "class Restaurant:\n    def __init__(self, restaurant_name:str, cuisine_type:str)->None:\n        self.restaurant_name = restaurant_name\n        self.cuisine_type = cuisine_type\n        self.number_served = 0\n    def describe_restaurant(self)->None:\n        print(f'The restaurant\\'s name is {self.restaurant_name}.')\n        print(f'The cuisine type is {self.cuisine_type}.')\n    def open_restaurant(self)->None:\n        print(f'{self.restaurant_name} is now open!')\n    def set_number_served(self, number_served):\n        self.number_served = number_served\n    def increment_number_served(self, additional_served):\n        self.number_served += additional_served\nrestaurant:Restaurant = Restaurant('The Great Delight', 'Italian')\nprint('Number of customers served:', restaurant.number_served)\nrestaurant.number_served = 100\nprint('Number of customers served:', restaurant.number_served)\nrestaurant.set_number_served(200)\nprint('Number of customers served:', restaurant.number_served)\nrestaurant.increment_number_served(50)\nprint('Number of customers served:', restaurant.number_served)",
    "9-5": "class User:\n    def __init__(self, first_name:str, last_name:str, age:int, gender:str, email:str)->None:\n        self.first_name = first_name\n        self.last_name = last_name\n        self.age = age\n        self.gender = gender\n        self.email = email\n        self.login_attempts = 0\n    def describe_user(self)->None:\n        print(f'User Information:\\nFirst Name: {self.first_name}\\nLast Name: {self.last_name}\\nAge: {self.age}\\nGender: {self.gender}\\nEmail: {self.email}')\n    def greet_user(self)->None:\n        print(f'Hello, {self.first_name}! Welcome back.')\n    def increment_login_attempts(self)->None:\n        self.login_attempts += 1\n    def reset_login_attempts(self)->None:\n        self.login_attempts = 0\nuser:User = User('John', 'Doe', 30, 'Male', 'john@example.com')\nuser.increment_login_attempts()\nuser.increment_login_attempts()\nuser.increment_login_attempts()\nprint('Login Attempts:', user.login_attempts)\nuser.reset_login_attempts()\nprint('Login Attempts:', user.login_attempts)",
    "9-6": "from typing import Optional, List\n\nclass Restaurant:\n    def __init__(self, restaurant_name: str, cuisine_type: str) -> None:\n        self.restaurant: str = restaurant_name\n        self.cuisine: str = cuisine_type\n\n    def describe_restaurant(self) -> None:\n        print(f'Restaurant Name: {self.restaurant}')\n        print(f'Cuisine Type: {self.cuisine}')\n\n    def open_restaurant(self) -> None:\n        print(f'{self.restaurant} is open')\n\n\nclass IceCreamStand(Restaurant):\n    def __init__(self, restaurant_name: str, cuisine_type: str, suggestion: str) -> None:\n        super().__init__(restaurant_name, cuisine_type)\n        self.suggestion: str = suggestion\n        self.flavors: List[Optional[str]] = []\n\n    def display_flavors(self) -> None:\n        print(\"Available Ice Cream Flavors:\")\n        for flavor in self.flavors:\n            print(flavor)\n\n\nice_cream_stand = IceCreamStand(\"Ice Cream Paradise\", \"Ice Cream\", 'very nice')\nice_cream_stand.flavors = [\"Chocolate\", \"Vanilla\", \"Strawberry\", \"Mint\", \"Cookie Dough\"]\nprint(ice_cream_stand.suggestion)\nice_cream_stand.display_flavors()\n",
    "9-7": "class User:\n    def __init__(self, first_name: str, last_name: str, age: int, height: float) -> None:\n        self.firstName = first_name\n        self.lastName = last_name\n        self.age = age\n        self.height = height\n        self.login = 0\n\n    def describe_user(self) -> None:\n        print(f'My name is {self.firstName} {self.lastName}. I am {self.age} years old. My height is {self.height} and login value is {self.login}')\n\n    def greet_user(self) -> None:\n        print(f'Welcome back {self.firstName}')\n\n    def increment_login_attempts(self) -> None:\n        self.login += 1\n        print(self.login)\n\n    def reset_login_attempts(self) -> None:\n        self.login = 0\n\n\nclass Admin(User):\n    def __init__(self, first_name: str, last_name: str, age: int, height: float) -> None:\n        super().__init__(first_name, last_name, age, height)\n        self.privileges: list[str] = []\n\n    def show_privileges(self) -> None:\n        for privilege in self.privileges:\n            print(f'List of privileges: {privilege}')\n\n\nfirst_user = Admin('Arman', 'Ashraf', 22, 5.11)\n\nfirst_user.show_privileges()\n\nfirst_user.privileges = [\n    'can reset passwords',\n    'can moderate discussions',\n    'can suspend accounts',\n]\n\nfirst_user.show_privileges()",
    "9-8": "class User:\n    def __init__(self,first_name:str,last_name:str,age:int,height:float) -> None:\n        self.firstName=first_name\n        self.lastName=last_name\n        self.age=age\n        self.height=height\n        self.login=0\n    def describe_user(self)->str:\n       return f'My name is {self.firstName}{self.lastName}. I am {self.age} old. and my height is {self.height} and login value is {self.login}'\n    def greet_user(self)->None:\n        print(f'Welcome back {self.firstName}')\n    def increment_login_attempts(self)->None:\n        self.login+=1\n        print(self.login)   \n    def reset_login_attempts(self)->None:\n        self.login=0     \nclass Admin(User):\n    def __init__(self,first_name:str,last_name:str,age:int,height:float)->None:\n        super().__init__(first_name,last_name,age,height)\n        self.privileges=Privileges()\nclass Privileges():\n    def __init__(self,privileges=[]) -> None:\n        self.privileges=privileges\n    def show_privileges(self):\n        if self.privileges:\n            for pre in self.privileges:\n                print(pre)\n        else:\n            print('there is no priviliges')        \n\n\nnewadmin:Admin =  Admin('ali','ahmad',3,3.3) \nprint(newadmin.age)    \nprint(newadmin.describe_user()) \nnewadmin.privileges.privileges=['reset passwords','change password','facebook server down']\nnewadmin.privileges.show_privileges() \n",
    "9-9": "class Car:\n    def __init__(self, make, model, year):\n        self.make = make\n        self.model = model\n        self.year = year\n        self.odometer_reading = 0\n    def get_descriptive_name(self):\n        long_name = f'{self.year} {self.make} {self.model}'\n        return long_name.title()\n    def read_odometer(self):\n        print(f'This car has {self.odometer_reading} miles on it.')\n    def update_odometer(self, mileage):\n        if mileage >= self.odometer_reading:\n            self.odometer_reading = mileage\n        else:\n            print('You can\\'t roll back an odometer!')\n    def increment_odometer(self, miles):\n        self.odometer_reading += miles\nclass ElectricCar(Car): \n    def __init__(self, make, model, year):\n        super().__init__(make, model, year)\n        self.battery = Battery()       \nclass Battery:\n    def __init__(self, battery_size=60):\n        self.battery_size = battery_size\n    def describe_battery(self):\n        print(f'This car has a {self.battery_size}-kWh battery.')\n    def upgrade_battery(self):\n        if self.battery_size == 60:\n            self.battery_size = 65\n            print(f'Upgrading battery size to {self.battery_size}')\n        else:\n            print('Battery is full!')\n    def get_range(self):\n        if self.battery_size == 60:\n            range = 260\n        elif self.battery_size == 100:\n            range = 315\n        else:\n            range = 0\n        print(f'This car can go approximately {range} miles on a full charge.')\n\nprint('Make an electric car, and check the battery:')\nmy_tesla:ElectricCar = ElectricCar('tesla', 'model','s', 2024)\nmy_tesla.battery.describe_battery()\n\nprint('\\nUpgrade the battery, and check it again:')\nmy_tesla.battery.upgrade_battery()\nmy_tesla.battery.describe_battery()\n\nprint('\\nTry upgrading the battery a second time.')\nmy_tesla.battery.upgrade_battery()\nmy_tesla.battery.describe_battery()",
    "9-10": "# This is a restaurant file and uncomment the import statement\nclass Restaurant:\n    def __init__(self, restaurant_name:str, cuisine_type:str)->None:\n        self.restaurant_name = restaurant_name\n        self.cuisine_type = cuisine_type\n        self.number_served = 0\n    def describe_restaurant(self)->None:\n        print(f'The restaurant\\'s name is {self.restaurant_name}.')\n        print(f'The cuisine type is {self.cuisine_type}.')\n    def open_restaurant(self)->None:\n        print(f'{self.restaurant_name} is now open!')\n    def set_number_served(self, number_served):\n        self.number_served = number_served\n    def increment_number_served(self, additional_served):\n        self.number_served += additional_served\n#from restaurant.restaurant import Restaurant\n\nrestaurant = Restaurant('Aone pizza shop', 'pizza')\nrestaurant.describe_restaurant()\nrestaurant.open_restaurant()",
    "9-11": "# This is a myadmin file and uncomment the import statement\nclass User:\n    def __init__(self,first_name:str,last_name:str,age:int,height:float) -> None:\n        self.firstName=first_name\n        self.lastName=last_name\n        self.age=age\n        self.height=height\n        self.login=0\n    def describe_user(self)->str:\n       return f'My name is {self.firstName}{self.lastName}. I am {self.age} old. and my height is {self.height} and login value is {self.login}'\n    def greet_user(self)->None:\n        print(f'Welcome back {self.firstName}')\n    def increment_login_attempts(self)->None:\n        self.login+=1\n        print(self.login)   \n    def reset_login_attempts(self)->None:\n        self.login=0     \nclass Admin(User):\n    def __init__(self,first_name:str,last_name:str,age:int,height:float)->None:\n        super().__init__(first_name,last_name,age,height)\n        self.privileges=Privileges()\nclass Privileges():\n    def __init__(self,privileges=[]) -> None:\n        self.privileges=privileges\n    def show_privileges(self):\n        if self.privileges:\n            for pre in self.privileges:\n                print(pre)\n        else:\n            print('there is no priviliges')  \n#from myadmin.myadmin import Admin\n\nnewadmin = Admin('ali','ahmad',3,3.3)\nprint(newadmin.age)\nnewadmin.describe_user()\nnewadmin.privileges.privileges = ['reset passwords','change password','facebook server down']\nnewadmin.privileges.show_privileges()\nprint(newadmin.age)",
    "9-12": "# This is a user class file and uncomment the import statement\nclass User:\n    def __init__(self,first_name:str,last_name:str,age:int,height:float) -> None:\n        self.firstName=first_name\n        self.lastName=last_name\n        self.age=age\n        self.height=height\n        self.login=0\n    def describe_user(self)->str:\n       return f'My name is {self.firstName}{self.lastName}. I am {self.age} old. and my height is {self.height} and login value is {self.login}'\n    def greet_user(self)->None:\n        print(f'Welcome back {self.firstName}')\n    def increment_login_attempts(self)->None:\n        self.login+=1\n        print(self.login)   \n    def reset_login_attempts(self)->None:\n        self.login=0\n#This is Privileges file uncomment the import statement \nclass Privileges():\n    def __init__(self,privileges=[]) -> None:\n        self.privileges=privileges\n    def show_privileges(self):\n        if self.privileges:\n            for pre in self.privileges:\n                print(pre)\n        else:\n            print('there is no priviliges')  \n# This is newadmin file uncomment the import statement \n#from user_class import User\n#from Privileges import Privileges     \nclass Admin(User):\n    def __init__(self,first_name:str,last_name:str,age:int,height:float)->None:\n        super().__init__(first_name,last_name,age,height)\n        self.privileges=Privileges()    \n#from newadmin.newadmin import Admin\n\nnewadmin = Admin('alid', 'ahmad', 3, 3.3)\nprint(newadmin.age)\nprint(newadmin.describe_user())\nnewadmin.privileges.privileges = ['reset passwords', 'change password', 'facebook server down']\nnewadmin.privileges.show_privileges()",
    "9-13": "from random import randint\n\nclass Die:\n    def __init__(self, sides: int = 6) -> None:\n        self.sides = sides\n\n    def roll_die(self) -> int:\n        return randint(1, self.sides)\n\n\ndie6 = Die()\ndata6 = [die6.roll_die() for _ in range(10)]\nprint('10 rolls of a 6-sided die:')\nprint(data6)\n\ndie10 = Die(10)\ndata10 = [die10.roll_die() for _ in range(10)]\nprint('10 rolls of a 10-sided die:')\nprint(data10)\n\ndie20 = Die(20)\ndata20 = [die20.roll_die() for _ in range(10)]\nprint('10 rolls of a 20-sided die:')\nprint(data20)",
    "9-14": "from random import choice\n\nprint('We see a list of winning tickets')\nwinning_list = []\nlist_of_numbers_letters = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'a', 'b', 'c', 'd', 'e']\n\nwhile len(winning_list) < 4:\n    current_choice = choice(list_of_numbers_letters)\n    if current_choice not in winning_list:\n        winning_list.append(current_choice)\n\nprint(f'The final winning ticket is {winning_list}')",
    "9-15": "from random import choice\n\ndef get_winning_ticket(no_of_possibilities: list[str|int]) -> list[str|int]:\n    winning_ticket_list = []\n    while len(winning_ticket_list) < 4:\n        selected_item = choice(no_of_possibilities)\n        if selected_item not in winning_ticket_list:\n            winning_ticket_list.append(selected_item)\n    return winning_ticket_list\n\n\ndef make_random_ticket(no_of_possibilities: list[int|str]) -> list[str|int]:\n    make_randam_ticket = []\n    while len(make_randam_ticket) < 4:\n        selected_item = choice(no_of_possibilities)\n        if selected_item not in make_randam_ticket:\n            make_randam_ticket.append(selected_item)\n    return make_randam_ticket\n\n\ndef check_ticket(new_make_random_ticket: list[int|str], winning_ticket_list: list[int|str]) -> bool:\n    for element in new_make_random_ticket:\n        if element not in winning_ticket_list:\n            return False\n    return True\n\n\nno_of_possibilities = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'a', 'b', 'c', 'd', 'e']\nnew_winning_ticket_list = get_winning_ticket(no_of_possibilities)\n\nplays = 0\nwon = False\nmax_tries = 1000333\n\nwhile not won and plays < max_tries:\n    new_make_random_ticket = make_random_ticket(no_of_possibilities)\n    won = check_ticket(new_make_random_ticket, new_winning_ticket_list)\n    plays += 1\n\nif won:\n    print(\"Congratulations! You have a winning ticket!\")\n    print(f\"Your ticket numbers: {new_make_random_ticket}\")\n    print(f\"Winning ticket numbers: {new_winning_ticket_list}\")\n    print(f\"It took you only {plays} attempts to win!\")\nelse:\n    print(f\"After {plays} attempts, unfortunately, no winning ticket was drawn.\")\n    print(f\"Your ticket numbers: {new_make_random_ticket}\")\n    print(f\"Winning ticket numbers: {new_winning_ticket_list}\")",
    "9-16": "import math\n\nprint(math.pi)",
    "10-1": "with open('learning_python.txt') as lp:\n    reads = lp.read()\n    print(reads)\n    print('==================')\n    print(reads)\n    reads = lp.readlines()\n    [print(reads_line) for reads_line in list(reads)]\n# OR\nfrom pathlib import Path\npath = Path('learning_python.txt')\n\nprint(path.read_text())\nprint('++++++++++++++++++++++++++++')\ncontents = path.read_text()\nlines = contents.splitlines()\n[print(line) for line in lines]",
    "10-2": "from pathlib import Path\npath=Path('learning_python.txt')\nreads = path.read_text()\nprint(reads)\nlinebyline = reads.splitlines()\nfor i in linebyline:\n    print(i.replace('Python', 'C'))\n# OR \nwith open('learning_python.txt') as lp:\n    reads=lp.read()\n    replace=reads.replace('Python','C')\n    print(reads)\n    print(replace)",
    "10-3": "filename = 'learning_python.txt'\n\nwith open(filename) as file_object:\n    for line in file_object.read().splitlines():\n        print(line)",
    "10-4": "from pathlib import  Path\nuser_name:str =input(\"Please enter your Name\")\npath=Path('guest.txt')\npath.write_text(user_name)",
    "10-5": "prompt ='Please enter your name\\n'\nprompt +='\\nEnter quite if this are is no more names'\n \n\nguest_list:list[str]=[]\nwhile True:\n    user_name:str =input(prompt)\n    if user_name.lower() !='quit':\n        guest_list.append(user_name)\n        print(f'We are adding {user_name} to the guest list')\n    else:\n        break\n \nwith open('guest_book.txt','w') as file:\n    for guest in guest_list:\n        file.write(guest+'\\n')",
    "10-6": "try:\n    num1:int = int(input('Please Enter the first number')) \n    num2:int = int(input('Please Enter the second number')) \nexcept ValueError:\n     print('Please enter a number')    \nelse:\n    print(num1+num2)     ",
    "10-7": "while True:\n    try:\n        num_one:str = input('Please Enter the first number: ')\n        if num_one.lower() == 'quit':\n            print('Program is finished.')\n            break\n        num1:int = int(num_one)\n        \n        num_two:str = input('Please Enter the second number: ')\n        if num_two.lower == 'quit':\n            print('Program is finished.')\n            break\n        num2:int = int(num_two)\n        \n        print(num1 + num2)\n    except ValueError:\n        print('Please enter valid numbers or \"quit\" to exit.')",
    "10-8": "try:\n    with open('cats.txt') as cats:\n        print(\"Contents of cats.txt:\")\n        print(cats.read())\nexcept FileNotFoundError as e:\n    print(f\"Error: {e.filename} not found.\")\n\ntry:\n    with open('dogs.txt') as dogs:\n        print(\"\\nContents of dogs.txt:\")\n        print(dogs.read())\nexcept FileNotFoundError as e:\n    print(f\"Error: {e.filename} not found.\")",
    "10-9": "try:\n    with open('cats.tdxt') as cats:\n        print(\"Contents of cats.txt:\")\n        print(cats.read())\nexcept FileNotFoundError as e:\n    print(f\"Error: {e.filename} not found.\")\n\ntry:\n    with open('dogs.txt') as dogs:\n        print(\"\\nContents of dogs.txt:\")\n        print(dogs.read())\nexcept FileNotFoundError as e:\n    print(f\"Error: {e.filename} not found.\")",
    "10-10": "def count_common_words(filename, word):\n    try:\n        total_words = filename.read().lower().count(word)\n        if total_words > 0:\n            print(f\"The word '{word}' appears in the file '{filename.name}' about {total_words} times.\")\n        else:\n            print(f\"The word '{word}' was not found in the file '{filename.name}'.\")   \n        \n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n   \n\nwith open('gutenberg_file.txt', 'r') as gbfile:\n    count_common_words(gbfile, 'thse')",
    "10-11": "import json\n# suppose this is favorite_number_writer.py file\nuser_favorite_number:int=int(input('Please enter your favorite number'))\nuser_store=json.dumps(user_favorite_number)\nwith open('json_data.txt','w') as jsonfile:\n    jsonfile.write(user_store)\n# suppose this is favorite_number_reader.py file    \nwith open('json_data.txt','r') as jsonreadfile:\n    user_favorite_number=json.loads(jsonreadfile.read())\n    print(f\"I know your favorite number! It’s {user_favorite_number}.\")",
    "10-12": "import json\ndef get_favorite_number(filename:str)->int|None:\n    try:\n        with open(filename, 'r') as file:\n            favorite_number = json.load(file)\n            print(f\"Your favorite number is {favorite_number}.\")\n            return favorite_number\n    except FileNotFoundError:\n        print(f\"{filename} not found.\")\n        return None\n    except json.JSONDecodeError:\n        print(f\"Error decoding {filename}.\")\n        return None\n\ndef store_favorite_number(filename:str)->int|None:\n    try:\n        favorite_number = int(input(\"What is your favorite number? \"))\n        with open(filename, 'w') as file:\n            json.dump(favorite_number, file)\n        print(\"Favorite number stored successfully!\")\n    except ValueError:\n        print(\"Please enter a valid number.\")\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n\ndef main():\n    filename = 'favorite_number.json'\n    favorite_number = get_favorite_number(filename)\n    if favorite_number is None:\n        store_favorite_number(filename)\n    else:\n        print(\"Welcome back!\")\n        print(f\"Your favorite number is {favorite_number}.\")\n\n \nmain()",
    "10-13": "import json\nfrom typing import Dict\n\ndef get_user_info()->Dict[str,str|int]:\n    username:str = input(\"Enter your username: \")\n    age:int = int(input(\"Enter your age: \"))\n    email:str = input(\"Enter your email: \")\n    return {\"username\": username, \"age\": age, \"email\": email}\n\ndef store_user_info(user_info, filename)->None:\n    with open(filename, 'w') as file:\n        json.dump(user_info, file)\n    print(\"User information stored successfully!\")\n\ndef read_user_info(filename):\n    try:\n        with open(filename, 'r') as file:\n            user_info = json.load(file)\n        return user_info\n    except FileNotFoundError:\n        print(f\"File '{filename}' not found.\")\n        return None\n    except json.JSONDecodeError:\n        print(f\"Error decoding JSON from '{filename}'.\")\n        return None\n\ndef main():\n    filename = 'user_info.json'\n    user_info = read_user_info(filename)\n    if user_info is None:\n        print(\"No user information found.\")\n        user_info = get_user_info()\n        store_user_info(user_info, filename)\n    else:\n        print(\"User information found:\")\n        print(f\"Username: {user_info['username']}\")\n        print(f\"Age: {user_info['age']}\")\n        print(f\"Email: {user_info['email']}\")\n\nmain()",
    "10-14": "import json\n\ndef get_stored_username(filename:str)->str|None:\n    try:\n        with open(filename, 'r') as file:\n            user_info = json.load(file)\n        return user_info[\"username\"]\n    except FileNotFoundError:\n        return None\n    except json.JSONDecodeError:\n        print(f\"Error decoding JSON from '{filename}'.\")\n        return None\n\ndef get_new_username()->str:\n    username:str = input(\"Enter your username: \")\n    return username\n\ndef greet_user(filename)->None:\n    stored_username = get_stored_username(filename)\n    if stored_username:\n        print(f\"Welcome back, {stored_username}!\")\n        confirm_username = input(\"Is this the correct username? (yes/no): \")\n        if confirm_username.lower() != \"yes\":\n            stored_username = get_new_username()\n            with open(filename, 'w') as file:\n                json.dump({\"username\": stored_username}, file)\n            print(f\"Your username has been updated to {stored_username}.\")\n        else:\n            print(\"Enjoy your session!\")\n    else:\n        username = get_new_username()\n        with open(filename, 'w') as file:\n            json.dump({\"username\": username}, file)\n        print(f\"We'll remember you when you come back, {username}!\")\n\ndef main():\n    filename = 'username.json'\n    greet_user(filename)\n\nmain()",

    
  
}


class BookSolutions:
    def __init__(self):
        self.questions = questions
        self.solutions = solutions

    def find_solution(self, query: str) -> List[tuple[str, str, str]] | str|None:
        query_lower = query.lower().strip()
        matching_solutions: List[tuple[str, str, str]] = []
        for key, value in self.questions.items():
            if len(query_lower) > 10 and query_lower in value.lower():
                matching_solutions.append((key, value, self.solutions[key]))
            elif query_lower == key:
                matching_solutions.append((key, value, self.solutions[key]))
        if matching_solutions:
            return matching_solutions
        else:
            return None
        
book_solutions = BookSolutions()
 
def question(query: str):
    if not query.strip():   
        print("Please write the question or question number (i.e,2-2)")
    else:
        result = book_solutions.find_solution(query)
        if result is None:
            print("Solution not found")
        else:
            for key, question, value in result:
                print(f"# {question} \n# Solution:\n{value}\n")

 