from typing import Dict
solutions:Dict[str,str] = {
    "2-1": "message:str='My name is Arman'\nprint(message)",
    "2-2": "message:str='I have completed Bachelor\'s degree in Mathematics.'\nprint(message)\nnew_message:str=f'My name is Arman.{message}'\nprint(new_message)",
    "2-3": "person_Name:str='Arman'\npersonal_Message:str=f'Hello {person_Name} world you like to learn some Python today?'\nprint(personal_Message)",
    "2-4": "person_Name:str='Arman aShraf'\nprint(person_Name.lower())\nprint(person_Name.upper())\nprint(person_Name.title())",
    "2-5": "famous_person:str='Albert Einstein'\nfamous_quote:str='“A person who never made a mistake never tried anything new.”'\nprint(f'{famous_person} once said , {famous_quote}')",
    "2-6": "famous_person:str='Albert Einstein'\nfamous_quote:str=f'{famous_person} once said , “A person who never made a mistake never tried anything new.”'\nprint(famous_quote)",
    "2-7": "My_Name:str = '\tArman\n  '\nprint(My_Name.lstrip())\nprint(My_Name.rstrip())\nprint(My_Name.strip())",
    "2-8": "file_Name:str='python_notes.txt'\nprint(file_Name.removesuffix('.txt'))",
    "2-9": "print(5+3)\nprint(11-3)\nprint(4*2)\nprint(16//2)",
    "2-10": "favorite_number:int=1\nfavorite_message:str=f'{favorite_number} is my favorite number'\nprint(favorite_message)",
    "2-11": "# Define variables for name and date.\n# my_name: str represents the name of the user.\n# today_date: str represents the current date.\nmy_name: str = 'Arman'\ntoday_date: str = '11 Feb 2024'\n\n# Print the name and date.\nprint(\"Name:\", my_name)\nprint(\"Date:\", today_date)",
    "2-12": "import this",
    "3-1": "names:list[str] = ['sameer','mazher','bilal']\nprint(names[0])\nprint(names[1])\nprint(names[2])",
    "3-2": "names:list[str] = ['sameer','mazher','bilal']\nprint(f'{names[0]} is my favorite friend.' )\nprint(f'{names[1]} is my favorite friend.' )\nprint(f'{names[2]} is my favorite friend.' )",
    "3-3": "favorite_transportation:list[str]=['motercycle','bus']\nprint(f'I have a {favorite_transportation[0]}')\nprint(f'Fair of {favorite_transportation[1]} is low reletive to the car')",
    "3-4": "names:list[str] = ['sameer','mazher','bilal']\nprint(f'Dear {names[0]} ,\n\tYou are invited to dinner. Please join us for a wonderful evening.\n' )\nprint(f'Dear {names[1]},\n\tYou are invited to dinner. Please join us for a wonderful evening.\n' )\nprint(f'Dear {names[2]}  ,\n\tYou are invited to dinner. Please join us for a wonderful evening.\n' )",
    "3-5": "names:list[str] = ['sameer','mazher','bilal']\nprint(f'Dear {names[0]} ,\n\tYou are invited to dinner. Please join us for a wonderful evening.\n' )\nprint(f'Dear {names[1]},\n\tYou are invited to dinner. Please join us for a wonderful evening.\n' )\nprint(f'Dear {names[2]}  ,\n\tYou are invited to dinner. Please join us for a wonderful evening.\n' )\ndeleted:str=names.pop(1)\nprint(f'Sorry {deleted} can\'t make it to dinner')\nnames.insert(1,'arman')\nprint(f'Dear {names[0]} ,\n\tYou are invited to dinner. Please join us for a wonderful evening.\n' )\nprint(f'Dear {names[1]},\n\tYou are invited to dinner. Please join us for a wonderful evening.\n' )\nprint(f'Dear {names[2]}  ,\n\tYou are invited to dinner. Please join us for a wonderful evening.\n' )\nnames.insert(0,'ashraf')\nnames.insert(len(names)//2, 'zaman')\n\nnames.append('usman')\nprint(f'Dear {names[0]} ,\n\tYou are invited to dinner. Please join us for a wonderful evening.\n' )\nprint(f'Dear {names[1]},\n\tYou are invited to dinner. Please join us for a wonderful evening.\n' )\nprint(f'Dear {names[2]}  ,\n\tYou are invited to dinner. Please join us for a wonderful evening.\n' )\nprint(f'Dear {names[3]} ,\n\tYou are invited to dinner. Please join us for a wonderful evening.\n' )\nprint(f'Dear {names[4]},\n\tYou are invited to dinner. Please join us for a wonderful evening.\n' )\nprint(f'Dear {names[5]}  ,\n\tYou are invited to dinner. Please join us for a wonderful evening.\n' )\nprint(names)",
    "3-6": "names:list[str] = ['sameer','mazher','bilal']\nprint(f'Dear {names[0]} ,\n\tYou are invited to dinner. Please join us for a wonderful evening.\n' )\nprint(f'Dear {names[1]},\n\tYou are invited to dinner. Please join us for a wonderful evening.\n' )\nprint(f'Dear {names[2]}  ,\n\tYou are invited to dinner. Please join us for a wonderful evening.\n' )\ndeleted:str=names.pop(1)\nprint(f'Sorry {deleted} can\'t make it to dinner')\nnames.insert(1,'arman')\nprint(f'Dear {names[0]} ,\n\tYou are invited to dinner. Please join us for a wonderful evening.\n' )\nprint(f'Dear {names[1]},\n\tYou are invited to dinner. Please join us for a wonderful evening.\n' )\nprint(f'Dear {names[2]}  ,\n\tYou are invited to dinner. Please join us for a wonderful evening.\n' )\nnames.insert(0,'ashraf')\nnames.insert(len(names)//2, 'zaman')\n\nnames.append('usman')\nprint(f'Dear {names[0]} ,\n\tYou are invited to dinner. Please join us for a wonderful evening.\n' )\nprint(f'Dear {names[1]},\n\tYou are invited to dinner. Please join us for a wonderful evening.\n' )\nprint(f'Dear {names[2]}  ,\n\tYou are invited to dinner. Please join us for a wonderful evening.\n' )\nprint(f'Dear {names[3]} ,\n\tYou are invited to dinner. Please join us for a wonderful evening.\n' )\nprint(f'Dear {names[4]},\n\tYou are invited to dinner. Please join us for a wonderful evening.\n' )\nprint(f'Dear {names[5]}  ,\n\tYou are invited to dinner. Please join us for a wonderful evening.\n' )\nprint(names)",
    "3-7": "names:list[str] = ['sameer','mazher','bilal']\nprint(f'Dear {names[0]} ,\n\tYou are invited to dinner. Please join us for a wonderful evening.\n' )\nprint(f'Dear {names[1]},\n\tYou are invited to dinner. Please join us for a wonderful evening.\n' )\nprint(f'Dear {names[2]}  ,\n\tYou are invited to dinner. Please join us for a wonderful evening.\n' )\ndeleted:str=names.pop(1)\nprint(f'Sorry {deleted} can\'t make it to dinner')\nnames.insert(1,'arman')\nprint(f'Dear {names[0]} ,\n\tYou are invited to dinner. Please join us for a wonderful evening.\n' )\nprint(f'Dear {names[1]},\n\tYou are invited to dinner. Please join us for a wonderful evening.\n' )\nprint(f'Dear {names[2]}  ,\n\tYou are invited to dinner. Please join us for a wonderful evening.\n' )\nnames.insert(0,'ashraf')\nnames.insert(len(names)//2, 'zaman')\n\nnames.append('usman')\nprint(f'Dear {names[0]} ,\n\tYou are invited to dinner. Please join us for a wonderful evening.\n' )\nprint(f'Dear {names[1]},\n\tYou are invited to dinner. Please join us for a wonderful evening.\n' )\nprint(f'Dear {names[2]}  ,\n\tYou are invited to dinner. Please join us for a wonderful evening.\n' )\nprint(f'Dear {names[3]} ,\n\tYou are invited to dinner. Please join us for a wonderful evening.\n' )\nprint(f'Dear {names[4]},\n\tYou are invited to dinner. Please join us for a wonderful evening.\n' )\nprint(f'Dear {names[5]}  ,\n\tYou are invited to dinner. Please join us for a wonderful evening.\n' )\nprint('we can invite only two people')\n\ncount:int=len(names)-1\n\nwhile count>=2:\n      deleteditem:str=names.pop()\n      print(f'Sorry {deleteditem}, you are not invited')\n      count-=1\nprint(f'Dear {names[0]} ,\n\tYou are invited to dinner. Please join us for a wonderful evening.\n' )\nprint(f'Dear {names[1]},\n\tYou are invited to dinner. Please join us for a wonderful evening.\n' )\ndel names[0]\ndel names[0]\n\nprint(names)",
    "3-8": "fav_places:list[str]=['lahore','itlay','france','islambad','new York']\nprint('Original Order')\nprint(fav_places)\nprint(sorted(fav_places))\nprint(fav_places)\nprint(sorted(fav_places,reverse=True))\nprint(fav_places)\nfav_places.reverse()\nprint(fav_places)\nfav_places.reverse()\nprint(fav_places)\nfav_places.sort()\nprint(fav_places)\nfav_places.sort(reverse=True)\nprint(fav_places)",
    "3-9": "total_guest:list[str] = ['ali', 'asad','ahmad']\ntotal_length:int = len(total_guest)\nprint(f'Total guest are {total_length}')",
    "3-10": "five_places = ['Italy', 'Dubai', 'Pakistan', 'Makkah', 'California']\n\nprint(\"Original List:\", five_places)\nfive_places.append('New York')\nprint(\"Appended 'New York':\", five_places)\nfive_places.insert(1, 'Paris')\nprint(\"Inserted 'Paris':\", five_places)\nfive_places.remove('Dubai')\nprint(\"Removed 'Dubai':\", five_places)\npopped_in_five_places = five_places.pop(3)\nprint(\"Popped item at index 3:\", popped_in_five_places)\nindex = five_places.index('Pakistan')\nprint(\"Index of 'Pakistan':\", index)\ncount = five_places.count('Italy')\nprint(\"Count of 'Italy':\", count)\nfive_places.sort()\nprint(\"Sorted List:\", five_places)\nfive_places.reverse()\nprint(\"Reversed List:\", five_places)\ncopy_of_five_places = five_places.copy()\nprint(\"Copy of List:\", copy_of_five_places)\nfive_places.clear()\nprint(\"Cleared List:\", five_places)\nfive_places.extend(['France', 'Spain'])\nprint(\"Extended List:\", five_places)",
    "3-11": "numbers:list[int] = [1, 2, 3, 4, 5]\n\ntry:\n    print(numbers[1])\nexcept IndexError:\n    print(\"IndexError: Index is out of range\")",
    "4-1": "my_favorite_pizza:list[str] = ['pizza1','pizza2', 'pizza3']\nfor pizza in my_favorite_pizza:\n     print(f' {pizza}')\n     print(f'My favourite pizza {pizza} and i like it very much')\nprint(\"\\nI really love pizza!\")",
    "4-2": "animals_list = ['cat', 'dog', 'bear']\n\nfor animal in animals_list:\n    print(animal)\n    print(f'A {animal} would make a great pet.')\n\nprint('Any of these animals would make a great pet!')",
    "4-3": "for num in range(1,21):\n    print(num)",
    "4-4": "for one_million in range(1,1000001):\n    print(one_million)",
    "4-5": "list_of_one_million = list(range(1, 1000001))\ntotal = sum(list_of_one_million)\nminimum = min(list_of_one_million)\nmaximum = max(list_of_one_million)\n\nprint(f'The sum of the numbers from 1 to 1,000,000 is {total}.')\nprint(f'The minimum number in the range 1 to 1,000,000 is {minimum}.')\nprint(f'The maximum number in the range 1 to 1,000,000 is {maximum}.')",
    "4-6": "odd_list:list[int] = list(range(1,21,2))\nfor odd_num in odd_list:\n    print(f'Odd number is {odd_num}')",
    "4-7": "multiple_of_three: list[int] = list(range(3,31,3))\nfor i in multiple_of_three:\n    print(i)",
    "4-8": "for cube in range(1,11):\n    print(f'Cube of {cube} is {cube**3}')",
    "4-9": "list_of_cubes :list[int] = [cube**3 for cube in range(1,11)]\nprint(list_of_cubes)",
    "4-10": "list_of_even : list[int]=list(range(2,28,2))\nprint(list_of_even)\nprint(f'First three items  {list_of_even[:3]}')\n\nprint(f'Middle of the three items {list_of_even[len(list_of_even)//2-1:len(list_of_even)//2+2]}')\nprint(f'Last of the three items {list_of_even[len(list_of_even)-3:len(list_of_even)]}')",
    "4-11": "my_foods:list[str] = ['pizza', 'falafel', 'carrot cake']\nfriend_pizzas:list[str] = my_foods[:]\nmy_foods.append('new pizza')\nfriend_pizzas.append('friend new pizza')\nprint('\\nmy favorite pizzas are:')\nfor my_food in my_foods:\n    print(f'-{my_food}')\nprint(\"\\nMy friend's favorite pizzas are:\")\nfor friend_pizza in friend_pizzas:\n    print(f'-{friend_pizza}')",
    "4-12": "fruits = [\"apple\", \"banana\", \"cherry\"]\nvegetables = [\"carrot\", \"lettuce\", \"onion\"]\nprint(\"Fruits:\")\nfor fruit in fruits:\n    print(fruit)\n\nprint(\"\\nVegetables:\")\nfor vegetable in vegetables:\n    print(vegetable)",
    "4-13": "menu1:tuple[str,str,str,str,str] = ('burger', 'pizza', 'pasta', 'salad', 'ice cream')\n\nprint(\"Original Menu:\")\nfor food in menu1:\n    print(food)\n# menu[2] = 'sushi'\n\nmenu2:tuple[str,str,str,str,str] = ('burger', 'pizza', 'sushi', 'fruit salad', 'cake')\n\nprint(\"\\nRevised Menu:\")\nfor food in menu2:\n    print(food)",
       "5-1": "car = 'subaru'\nprint('Is car == subaru? I predict True.')\nprint(car == 'subaru')\nprint('Is car == audi? I predict False.')\nprint(car == 'audi')\n\nmy_name = 'arman'\nprint('Is my_name == arman? I predict True.')\nprint(my_name == 'arman')\nprint('Is my_name == armans? I predict false.')\nprint(my_name == 'armans')\n\nmy_city = 'sialkot'\nprint('Is my_city == sialkot? I predict True.')\nprint(my_city == 'sialkot')\nprint('Is my_city == sialkott? I predict false.')\nprint(my_city == 'sialkott')\n\nmy_country = 'pakistan'\nprint('Is my_country == pakistan? I predict True.')\nprint(my_country == 'pakistan')\nprint('Is my_country == pakistann? I predict false.')\nprint(my_country == 'pakistann')\n\ncurrent_prime_minister = 'anwar ul haq'\nprint('Is current_prime_minister == anwar ul haq? I predict True.')\nprint(current_prime_minister == 'anwar ul haq')\nprint('Is current_prime_minister == anwar ul haqq? I predict false.')\nprint(current_prime_minister == 'anwar ul haqq')\n\nmy_age = 22\nprint('Is my_age == 22 ? I predict True.')\nprint(my_age == 22)\nprint('Is my_age == 22 ? I predict True.')\nprint(my_age == 22)",
    "5-2": "name = 'Arman'\nfather_name = 'Ashraf'\nage = 22\nheight = 6\npasstest = True\nfailtest = False\n\nprint(name == 'Arman')\nprint(name == 'arman')\nprint(name != 'arman')\nprint(name != 'Arman')\nprint(name.lower() == 'arman')\nprint(name.lower() == 'Arman')\nprint(age == height)\nprint(age < height)\nprint(age > height)\nprint(age != height)\nprint(age <= height)\nprint(age >= height)\nprint(passtest and failtest)\nprint(passtest or failtest)\n\nfriend_list = ['sameer', 'ali', 'bilal']\nprint('sameer' in friend_list)\nprint('ahmad' in friend_list)\nprint('asif' not in friend_list)\nprint('bilal' not in friend_list)",
    "5-3": "alien_color = 'green'\nif alien_color == 'green':\n    print('You just earned 5 points!')",
    "5-4": "alien_color = 'yellow'\n\nif alien_color == 'green':\n    print('You just earned 5 points!')\n\nelse:\n    print('You just earned 10 points')",
    "5-5": "alien_color = 'red'\nif alien_color == 'green':\n    print('You just earned 5 points')\nelif(alien_color == 'yellow'):\n    print('you just earned 10 points')\nelif(alien_color == 'red'):\n    print('you just earned 15 points')",
    "5-6": "age = 18\n\nif age < 2:\n    print('You're a baby!')\nelif age < 4:\n    print('You're a toddler!')\nelif age < 13:\n    print('You're a kid!')\nelif age < 20:\n    print('You're a teenager!')\nelif age < 65:\n    print('You're an adult!')\nelse:\n    print('You're an elder!')",
    "5-7": "favorite_fruits = ['blueberries', 'apples', 'peaches']\n\nif ('bananas' in favorite_fruits):\n    print('You really like bananas!')\nif ('apples' in favorite_fruits):\n    print('You really like apples!')\nif ('blueberries' in favorite_fruits):\n    print('You really like blueberries!')\nif ('kiwis' in favorite_fruits):\n    print('You really like kiwis!')\nif ('peaches' in favorite_fruits):\n    print('You really like peaches!')",
    "5-8": "usernames = ['ali', 'arman', 'admin', 'usman', 'asad']\n\nfor username in usernames:\n    if username == 'admin':\n        print('Hello admin, would you like to see a status report?')\n    else:\n        print(f'Hello {username }, thank you for logging in again!')",
    "5-9": "usernames = ['ali', 'arman', 'admin', 'usman', 'asad']\n# usernames = []\n \nif usernames:\n    for username in usernames:\n        if username == 'admin':\n            print('Hello admin, would you like to see a status report?')\n        else:\n            print(f'Hello {username}, thank you for logging in again!')\nelse:\n    print('We need to find some users!')",
    "5-10": "current_users = ['ali','asad','zain','arman','arman']\nnew_users = ['ali','Asad','saad','sameer','mazher']\ncurrent_users_lower = [user.lower() for user in current_users]\n\nfor new_user in new_users:\n    if new_user.lower() in current_users_lower:\n        print(f'{new_user} is already taken. You will need to enter a new username.')\n    else:\n        print(f'{new_user} is available.')",
    "5-11": "numbers = list(range(1,10))\n\nfor number in numbers:\n    if number == 1:\n        print('1st')\n    elif number == 2:\n        print('2nd')\n    elif number == 3:\n        print('3rd')\n    else:\n        print(str(number) + 'th')",
    "6-1": "bio_data = {'first_name': 'Arman', 'last_name': 'Muhammad Ashraf', 'age': 22, 'city': 'sialkot'}\nfor key, value in bio_data.items():\n    print(f'{key}: {value}')",
    "6-2": "favorite_numbers = {'ali': 1, 'ahmad': 2, 'asad': 3, 'usman': 4, 'arman': 5}\nfor name, number in favorite_numbers.items():\n    print(f'{name} favorite number is {number}')",
    "6-3": "five_programming_words = {'get': 'get is used to get the item from the dictionary if not exist it gives none', 'set': 'Set is a data type one point is noted that set is mutable but its elements are immutable', 'Dict': 'Dict is just like a JavaScript Object for understanding', 'key': 'In Dictionary Key must be unique and immutable', 'value': 'In Dictionary Value may be list, tuple ...'}\nfor word, meaning in five_programming_words.items():\n    print(f'{word}:\n  {meaning}')",
    "6-4": "five_programming_words = {'get': 'get is used to get the item from the dictionary if not exist it gives none', 'set': 'Set is a data type one point is noted that set is mutable but its elements are immutable', 'Dict': 'Dict is just like a JavaScript Object for understanding', 'key': 'In Dictionary Key must be unique and immutable', 'value': 'In Dictionary Value may be list, tuple ...', 'if': 'for condition checking', 'loop': 'iteration', 'continue': 'skipping the value in loop', 'break': 'loop end', 'function': 'cde again and again use in our code'}\nfor word, meaning in five_programming_words.items():\n    print(f'\n{word}:\n  {meaning}')",
    "6-5": "rivers = {'nile': 'egypt', 'mississippi': 'united states', 'fraser': 'canada', 'kuskokwim': 'alaska', 'yangtze': 'china'}\nfor river, country in rivers.items():\n    print(f'The {river.upper()} runs through {country.title()}')\nprint('The following rivers are included in this data set:')\nfor river in rivers.keys():\n    print(f'- {river.title()}')\nprint('The following countries are included in this data set:')\nfor country in rivers.values():\n    print(f'- {country.title()}')",
    "6-6": "favorite_languages = {'jen': 'python', 'sarah': 'c', 'edward': 'rust', 'phil': 'python'}\npeople_list = ['jen', 'sarah', 'ali', 'zain', 'asad']\nfor people in people_list:\n    if people in favorite_languages.keys():\n        print(f'Thank you, {people}, for polling us.')\n    else:\n        print(f'{people}, what\'s your favorite language?')",
    "6-7": "bio_data0 = {'first_name': 'Arman', 'last_name': 'Muhammad Ashraf', 'age': 22, 'city': 'sialkot'}\nbio_data1 = {'first_name': 'zaman', 'last_name': 'Muhammad Ashraf', 'age': 32, 'city': 'sialkot'}\nbio_data2 = {'first_name': 'usman', 'last_name': 'Muhammad Ashraf', 'age': 26, 'city': 'sialkot'}\nlist_bio_data = [bio_data0, bio_data1, bio_data2]\nfor single_value in list_bio_data:\n    for bio_key, bio_data in single_value.items():\n        print(f'{bio_key} :{bio_data}')\n    print()",
    "6-8": "pet_1 = {'animal': 'animal_1', 'owner_name': 'x'}\npet_2 = {'animal': 'animal_2', 'owner_name': 'y'}\npet_3 = {'animal': 'animal_3', 'owner_name': 'z'}\npet_4 = {'animal': 'animal_4', 'owner_name': 'a'}\npet_list = [pet_1, pet_2, pet_3, pet_4]\nfor item in pet_list:\n    print(f'This pet is a {item['animal']} and the owner's name is {item['owner_name']}.')",
    "6-9": "favorite_places = {'ali': ['lahore', 'sialkot', 'multan'], 'arman': ['islamabad', 'karachi', 'johar town'], 'asad': ['murree', 'gujrat', 'sargodha']}\nfor name, places in favorite_places.items():\n    print(f'Welcome to {name} and your favorite places are: ')\n    for place in places:\n        print(f' -{place}')",
    "6-10": "favorite_numbers = {'ali': [1, 2], 'ahmad': [2, 3], 'asad': [3, 4], 'usman': [4, 5], 'arman': [5, 6]}\nfor name, favorite_number in favorite_numbers.items():\n    print(f'{name} favorite number are')\n    for num in favorite_number:\n        print(f'_{num}')",
    "6-11": "cities = {'sialkot': {'country': 'pakistan', 'population': 10, 'nearby mountains': 'k2'}, 'lahore': {'country': 'pakistan', 'population': 876, 'nearby mountains': 'k2'}, 'islamabad': {'country': 'pakistan', 'population': 20, 'nearby mountains': 'k2'}}\nfor city, city_info in cities.items():\n    print(f\"{city.title()} is in {city_info['country'].title()}.\")\n    print(f\"  It has a population of about {city_info['population']}.\")\n    print(f\"  The {city_info['nearby mountains'].title()} mounats are nearby.\")",
    "6-12": "previous_obj = {'name': 'arman'}\nprevious_obj['name'] = 'M arman'\nprevious_obj['age'] = 22\nprint(previous_obj)",
    "7-1": "rental_car = input('What kind of car would you like? ')\nprint(f\"Let me see if I can find you a {rental_car.title()}.\")",
    "7-2": "seating = int(input('How many people are in your dinner party tonight? '))\nif seating > 8:\n    print(\"I'm sorry, you'll have to wait for a table.\")\nelse:\n    print(\"Your table is ready.\")",
    "7-3": "multiples = int(input('Give me a number, please: '))\nif multiples % 10 == 0:\n    print(f'{multiples} is a multiple of 10.')\nelse:\n    print(f'{multiples} is not a multiple of 10.')",
    "7-4": "prompt = \"\nWhat topping would you like on your pizza?\"\nprompt += \"\nEnter 'quit' when you are finished: \"\n\nwhile True:\n    pizza_topping = input(prompt)\n    if pizza_topping != 'quit':\n        print(f'I\'ll add {pizza_topping} to your pizza.')\n    else:\n        break",
    "7-5": "age_prompt = 'How old are you? '\nage_prompt += \"\nEnter 'quit' when you are finished.\"\n\nwhile True:\n    age = input(age_prompt)\n    if age == 'quit':\n        break\n    age = int(age)\n    if age < 3:\n        print('You get in free!')\n    elif age < 13:\n        print('Your ticket is $10.')\n    else:\n        print('Your ticket is $15.')",
    "7-6": "flag = True\nwhile flag:\n    pizza_topping = input('What topping would you like on your pizza? ')\n    if pizza_topping != 'quit':\n        print(f'Adding {pizza_topping} to your pizza.')\n    else:\n        flag = False",
    "7-7": "n = 2\nwhile n < 4:\n    print(n)",
    "7-8": "sandwich_orders = ['sandwich_1', 'sandwich_2', 'sandwich_3']\nfinished_sandwiches = []\n\nwhile sandwich_orders:\n    current_sandwich = sandwich_orders.pop()\n    print(f'I made your {current_sandwich} sandwich.')\n    finished_sandwiches.append(current_sandwich)\n\nprint('Here are the sandwiches made:')\nfor sandwich in finished_sandwiches:\n    print(sandwich)",
    "7-9": "sandwich_orders = ['pastrami', 'turkey', 'pastrami', 'ham', 'pastrami', 'roast beef', 'chicken', 'pastrami']\nsandwich_finished = []\n\nprint('Sorry, the deli has run out of pastrami.')\n\nwhile 'pastrami' in sandwich_orders:\n    sandwich_orders.remove('pastrami')\n\nwhile sandwich_orders:\n    removed = sandwich_orders.pop()\n    sandwich_finished.append(removed)\n\nprint('List of Finished Sandwiches:')\nfor sandwich in sandwich_finished:\n    print(sandwich)",
    "7-10": "responses = {}\nwhile True:\n    name = input(\"What's your name? \")\n    place = input(\"If you could visit one place in the world, where would it be? \")\n    responses[name] = place\n    repeat = input(\"Would you like to let someone else respond? (yes/no) \")\n    if repeat != 'yes':\n        break\nprint(\"--- Results ---\")\nfor name, place in responses.items():\n    print(f\"{name.title()} would like to visit {place.title()}.\")",
     "8-1": "def display_message() -> None:\n    print('I am learning Python.')\n\ndisplay_message()",
    "8-2": "def favorite_book(title: str) -> None:\n    print(f'One of my favorite books is {title}.')\n\nfavorite_book('Alice in Wonderland')",
    "8-3": "def make_shirt(size: str, message: str) -> None:\n    print(f'I have a {size} shirt whose message is {message}.')\n\nmake_shirt('large', 'very nice')\nmake_shirt(size='medium', message='Hello, world!')\nmake_shirt(message='Python rocks!', size='small')",
    "8-4": "def make_shirt(size: str = 'large', message: str = 'I love Python') -> None:\n    print(f'{message} shirt whose size is {size}.')\n\nmake_shirt()\nmake_shirt(size='medium')\nmake_shirt('Normal', 'I love so much Python')",
    "8-5": "def describe_city(name: str, country: str = 'Pakistan') -> None:\n    print(f'{name} is in {country}.')\n\ndescribe_city('Sialkot')\ndescribe_city('Karachi', 'Islamic Republic of Pakistan')\ndescribe_city('Islamabad')",
    "8-6": "def city_country(city_name: str, country: str) -> str:\n    return f'{city_name}, {country}'\n\nprint(city_country('Islamabad', 'Pakistan'))\nprint(city_country('Paris', 'France'))\nprint(city_country('Tokyo', 'Japan'))",
    "8-7": "def make_album(artist_name: str, album_title: str, tracks: int = None) -> Dict[str, str]:\n    album_info = {'artist': artist_name, 'title': album_title}\n    if tracks:\n        album_info['tracks'] = tracks\n    return album_info\n\nalbum1 = make_album('Ali', 'I am Ali')\nalbum2 = make_album('Zain', 'I am Zain')\nalbum3 = make_album('Saad', 'I am Saad', 20)\nprint(album1)\nprint(album2)\nprint(album3)",
    "8-8": "def make_album(artist_name: str, album_title: str, tracks: int = None) -> Dict[str, str]:\n    album_info = {'artist': artist_name, 'title': album_title}\n    if tracks:\n        album_info['tracks'] = tracks\n    return album_info\n\nprint('Enter \'quit\' at any time to stop.')\n\nwhile True:\n    artist_input = input('Please enter the name of the artist: ')\n    if artist_input.lower() == 'quit':\n        break\n    title_input = input('Please enter the title of the album: ')\n    if title_input.lower() == 'quit':\n        break\n    output = make_album(artist_input, title_input)\n    print(output)\n\nprint('Thanks for responding!')",
    "8-9": "def show_messages(messages: List[str]) -> None:\n    for msg in messages:\n        print(msg)\n\nmessages = ['My name is Arman', 'I am 22 years old']\nshow_messages(messages)",
    "8-10": "def show_messages(messages: List[str]) -> None:\n    for msg in messages:\n        print(msg)\n\n\n\ndef send_messages(messages: List[str]) -> List[str]:\n    sent_messages = []\n    while messages:\n        msg = messages.pop()\n        sent_messages.append(msg)\n        print(f'sending message {msg}')\n    return sent_messages\n\nmessages = ['My name is Arman', 'I am 22 years old', 'I am from Pakistan']\nshow_messages(messages)\nsent_messages = send_messages(messages)\nprint(sent_messages)\nprint(messages)",
    "8-11": "def show_messages(messages: List[str]) -> None:\n    for msg in messages:\n        print(msg)\n\ndef send_messages(messages: List[str]) -> List[str]:\n    sent_messages = []\n    while messages:\n        msg = messages.pop()\n        sent_messages.append(msg)\n        print(f'sending message {msg}')\n    return sent_messages\n\nmessages = ['My name is Arman', 'I am 22 years old', 'I am from Pakistan']\nshow_messages(messages)\nsent_messages = send_messages(messages[:])\nprint(sent_messages)\nprint(messages)",
    "8-12": "def make_sandwich(*items: str) -> None:\n    print('I\'ll make you a great sandwich:')\n    for item in items:\n        print(f'  ...adding {item} to your sandwich.')\n    print('Your sandwich is ready!')\n\nmake_sandwich('roast beef', 'cheddar cheese', 'lettuce', 'honey dijon')\nmake_sandwich('turkey', 'apple slices', 'honey mustard')\nmake_sandwich('peanut butter', 'strawberry jam')",
    "8-13": "def build_profile(first: str, last: str, **user_info: str) -> Dict[str, str]:\n    user_info['first_name'] = first\n    user_info['last_name'] = last\n    return user_info\n\nuser_profile = build_profile('Arman', 'Ashraf', location='Pakistan', field='Mathematics')\nprint(user_profile)",
    "8-14": "def make_car(manufacturer: str, model: str, **car_info: str) -> Dict[str, str]:\n    car = {'manufacturer': manufacturer, 'model': model}\n    for key, value in car_info.items():\n        car[key] = value\n    return car\n\n\ncar = make_car('subaru', 'outback', color='blue', tow_package=True)\nprint(car)\ncar1 = make_car('subaru', 'outback', color='white', tow_package=True)\nprint(car1)\ncar2 = make_car('honda', 'accord', year=1991, color='white', headlights='popup')\nprint(car2)",
    "8-15": "Printing Models: Put the functions for the example printing_models.py in a separate file called printing_functions.py. Write an import statement at the top of printing_models.py, and modify the file to use the imported functions.",
    "8-16": "Imports: Using a program you wrote that has one function in it, store that function in a separate file. Import the function into your main program file, and call the function using each of these approaches: import module_name from module_name import function_name from module_name import function_name as fn import module_name as mn from module_name import *",
    "8-17": "Styling Functions: Choose any three programs you wrote for this chapter, and make sure they follow the styling guidelines described in this section."

}




       