from typing import Dict
solutions:Dict[str,str] = {
    "2-1": "message:str='My name is Arman'\nprint(message)",
    "2-2": "message:str='I have completed Bachelor\\'s degree in Mathematics.'\nprint(message)\nnew_message:str=f'My name is Arman.{message}'\nprint(new_message)",
    "2-3": "person_Name:str='Arman'\npersonal_Message:str=f'Hello {person_Name} world you like to learn some Python today?'\nprint(personal_Message)",
    "2-4": "person_Name:str='Arman aShraf'\nprint(person_Name.lower())\nprint(person_Name.upper())\nprint(person_Name.title())",
    "2-5": "famous_person:str='Albert Einstein'\nfamous_quote:str='“A person who never made a mistake never tried anything new.”'\nprint(f'{famous_person} once said , {famous_quote}')",
    "2-6": "famous_person:str='Albert Einstein'\nfamous_quote:str=f'{famous_person} once said , “A person who never made a mistake never tried anything new.”'\nprint(famous_quote)",
    "2-7": "My_Name:str = '\tArman'\nprint(My_Name.lstrip())\nprint(My_Name.rstrip())\nprint(My_Name.strip())",
    "2-8": "file_Name:str='python_notes.txt'\nprint(file_Name.removesuffix('.txt'))" ,
    "2-9": "print(5+3)\nprint(11-3)\nprint(4*2)\nprint(16//2)",
    "2-10": "favorite_number:int=1\nfavorite_message:str=f'{favorite_number} is my favorite number'\nprint(favorite_message)",
    "2-11": "# Define variables for name and date.\n# my_name: str represents the name of the user.\n# today_date: str represents the current date.\nmy_name: str = 'Arman'\ntoday_date: str = '11 Feb 2024'\n\n# Print the name and date.\nprint(\"Name:\", my_name)\nprint(\"Date:\", today_date)",
    "2-12": "import this",
    "3-1": "names:list[str] = ['sameer','mazher','bilal']\nprint(names[0])\nprint(names[1])\nprint(names[2])",
    "3-2": "names:list[str] = ['sameer','mazher','bilal']\nprint(f'{names[0]} is my favorite friend.' )\nprint(f'{names[1]} is my favorite friend.' )\nprint(f'{names[2]} is my favorite friend.' )",
    "3-3": "favorite_transportation:list[str]=['motercycle','bus']\nprint(f'I have a {favorite_transportation[0]}')\nprint(f'Fair of {favorite_transportation[1]} is low reletive to the car')",
    "3-4": "names:list[str] = ['sameer','mazher','bilal']\nprint(f'Dear {names[0]} ,You are invited to dinner. Please join us for a wonderful evening.' )\nprint(f'Dear {names[1]},You are invited to dinner. Please join us for a wonderful evening.')\nprint(f'Dear {names[2]}  ,You are invited to dinner. Please join us for a wonderful evening.')",
    "3-5": "names:list[str] = ['sameer','mazher','bilal']\nprint(f'Dear {names[0]} ,You are invited to dinner. Please join usor a wonderful evening.' )\nprint(f'Dear {names[1]},You are invited to dinner. Please join us for wonderful evening.')\nprint(f'Dear {names[2]}  ,You are invited to dinner. Please join us for aonderful evening.')\ndeleted:str=names.pop(1)\nprint(f'Sorry {deleted} can\\'t make it to dinner')\nnames.insert(1,'arman')\nprint(f'Dear {names[0]} ,You are invited to dinner. Please jn us for a wonderful evening.')\nprint(f'Dear {names[1]},You are invited to dinner. Please joius for a wonderful evening.')\nprint(f'Dear {names[2]}  ,You are invited to dinner. Please join  for a wonderful evening.')\nnames.insert(0,'ashraf')\nnames.insert(len(names)//2, 'zaman')\n\nnames.append('usman')\nprint(f'Dear {names[0]} ,You are invited to dinner. Please join us for a wondeul evening.')\nprint(f'Dear {names[1]},You are invited to dinner. Please join us for a wonderfulvening.')\nprint(f'Dear {names[2]}  ,You are invited to dinner. Please join us for a wonderful evening.')\nprint(f'Dear {names[3]} ,You are invited to dinner. Please join us for a wonderful evening.')\nprint(f'Dear {names[4]},You are invited to dinner. Please join us for a wonderful evening.')\nprint(f'Dear {names[5]}  ,You are invited to dinner. Please join us for a wonderful evening.')\nprint(names)",
    "3-6": "names:list[str] = ['sameer','mazher','bilal']\nprint(f'Dear {names[0]} ,You are invited to dinner. Please join us for a wonderful evening.' )\nprint(f'Dear {names[1]},You are invited to dinner. Please join us for a wonderful evening.')\nprint(f'Dear {names[2]}  ,You are invited to dinner. Please join us for a wonderful evening.')\ndeleted:str=names.pop(1)\nprint(f'Sorry {deleted} can\\'t make it to dinner')\nnames.insert(1,'arman')\nprint(f'Dear {names[0]} ,You are invited to dinner. Please join us for a wonderful evening.')\nprint(f'Dear {names[1]},You are invited to dinner. Please join us for a wonderful evening.')\nprint(f'Dear {names[2]}  ,You are invited to dinner. Please join us for a wonderful evening.')\nnames.insert(0,'ashraf')\nnames.insert(len(names)//2, 'zaman')\n\nnames.append('usman')\nprint(f'Dear {names[0]} ,You are invited to dinner. Please join us for a wonderful evening.')\nprint(f'Dear {names[1]},You are invited to dinner. Please join us for a wonderful evening.')\nprint(f'Dear {names[2]}  ,You are invited to dinner. Please join us for a wonderful evening.')\nprint(f'Dear {names[3]} ,You are invited to dinner. Please join us for a wonderful evening.')\nprint(f'Dear {names[4]},You are invited to dinner. Please join us for a wonderful evening.')\nprint(f'Dear {names[5]}  ,You are invited to dinner. Please join us for a wonderful evening.')\nprint(names)",
    "3-7": "names:list[str] = ['sameer','mazher','bilal']\nprint(f'Dear {names[0]} ,You are invited to dinner. Please join us for a wonderful evening.' )\nprint(f'Dear {names[1]},You are invited to dinner. Please join us for a wonderful evening.')\nprint(f'Dear {names[2]}  ,You are invited to dinner. Please join us for a wonderful evening.')\ndeleted:str=names.pop(1)\nprint(f'Sorry {deleted} can\\'t make it to dinner')\nnames.insert(1,'arman')\nprint(f'Dear {names[0]} ,You are invited to dinner. Please join us for a wonderful evening.')\nprint(f'Dear {names[1]},You are invited to dinner. Please join us for a wonderful evening.')\nprint(f'Dear {names[2]}  ,You are invited to dinner. Please join us for a wonderful evening.')\nnames.insert(0,'ashraf')\nnames.insert(len(names)//2, 'zaman')\n\nnames.append('usman')\nprint(f'Dear {names[0]} ,You are invited to dinner. Please join us for a wonderful evening.')\nprint(f'Dear {names[1]},You are invited to dinner. Please join us for a wonderful evening.')\nprint(f'Dear {names[2]}  ,You are invited to dinner. Please join us for a wonderful evening.')\nprint(f'Dear {names[3]} ,You are invited to dinner. Please join us for a wonderful evening.')\nprint(f'Dear {names[4]},You are invited to dinner. Please join us for a wonderful evening.')\nprint(f'Dear {names[5]}  ,You are invited to dinner. Please join us for a wonderful evening.')\nprint('we can invite only two people')\n\ncount:int=len(names)-1\n\nwhile count>=2:\n      deleteditem:str=names.pop()\n      print(f'Sorry {deleteditem}, you are not invited')\n      count-=1\nprint(f'Dear {names[0]} ,You are invited to dinner. Please join us for a wonderful evening.')\nprint(f'Dear {names[1]},You are invited to dinner. Please join us for a wonderful evening.')\ndel names[0]\ndel names[0]\n\nprint(names)",
    "3-8": "fav_places:list[str]=['lahore','itlay','france','islambad','new York']\nprint('Original Order')\nprint(fav_places)\nprint(sorted(fav_places))\nprint(fav_places)\nprint(sorted(fav_places,reverse=True))\nprint(fav_places)\nfav_places.reverse()\nprint(fav_places)\nfav_places.reverse()\nprint(fav_places)\nfav_places.sort()\nprint(fav_places)\nfav_places.sort(reverse=True)\nprint(fav_places)",
    "3-9": "total_guest:list[str] = ['ali', 'asad','ahmad']\ntotal_length:int = len(total_guest)\nprint(f'Total guest are {total_length}')",
    "3-10": "five_places = ['Italy', 'Dubai', 'Pakistan', 'Makkah', 'California']\n\nprint(\"Original List:\", five_places)\nfive_places.append('New York')\nprint(\"Appended 'New York':\", five_places)\nfive_places.insert(1, 'Paris')\nprint(\"Inserted 'Paris':\", five_places)\nfive_places.remove('Dubai')\nprint(\"Removed 'Dubai':\", five_places)\npopped_in_five_places = five_places.pop(3)\nprint(\"Popped item at index 3:\", popped_in_five_places)\nindex = five_places.index('Pakistan')\nprint(\"Index of 'Pakistan':\", index)\ncount = five_places.count('Italy')\nprint(\"Count of 'Italy':\", count)\nfive_places.sort()\nprint(\"Sorted List:\", five_places)\nfive_places.reverse()\nprint(\"Reversed List:\", five_places)\ncopy_of_five_places = five_places.copy()\nprint(\"Copy of List:\", copy_of_five_places)\nfive_places.clear()\nprint(\"Cleared List:\", five_places)\nfive_places.extend(['France', 'Spain'])\nprint(\"Extended List:\", five_places)",
    "3-11": "numbers:list[int] = [1, 2, 3, 4, 5]\n\ntry:\n    print(numbers[1])\nexcept IndexError:\n    print(\"IndexError: Index is out of range\")",
    "4-1": "my_favorite_pizza:list[str] = ['pizza1','pizza2', 'pizza3']\nfor pizza in my_favorite_pizza:\n     print(f' {pizza}')\n     print(f'My favourite pizza {pizza} and i like it very much')\nprint(\"\\nI really love pizza!\")",
    "4-2": "animals_list:list[str] = ['cat', 'dog', 'bear']\n\nfor animal in animals_list:\n    print(animal)\n    print(f'A {animal} would make a great pet.')\n\nprint('Any of these animals would make a great pet!')",
    "4-3": "for num in range(1,21):\n    print(num)",
    "4-4": "for one_million in range(1,1000001):\n    print(one_million)",
    "4-5": "list_of_one_million:list[int] = list(range(1, 1000001))\ntotal:int = sum(list_of_one_million)\nminimum:int = min(list_of_one_million)\nmaximum:int = max(list_of_one_million)\n\nprint(f'The sum of the numbers from 1 to 1,000,000 is {total}.')\nprint(f'The minimum number in the range 1 to 1,000,000 is {minimum}.')\nprint(f'The maximum number in the range 1 to 1,000,000 is {maximum}.')",
    "4-6": "odd_list:list[int] = list(range(1,21,2))\nfor odd_num in odd_list:\n    print(f'Odd number is {odd_num}')",
    "4-7": "multiple_of_three: list[int] = list(range(3,31,3))\nfor i in multiple_of_three:\n    print(i)",
    "4-8": "for cube in range(1,11):\n    print(f'Cube of {cube} is {cube**3}')",
    "4-9": "list_of_cubes :list[int] = [cube**3 for cube in range(1,11)]\nprint(list_of_cubes)",
    "4-10": "list_of_even : list[int]=list(range(2,28,2))\nprint(list_of_even)\nprint(f'First three items  {list_of_even[:3]}')\n\nprint(f'Middle of the three items {list_of_even[len(list_of_even)//2-1:len(list_of_even)//2+2]}')\nprint(f'Last of the three items {list_of_even[len(list_of_even)-3:len(list_of_even)]}')",
    "4-11": "my_foods:list[str] = ['pizza', 'falafel', 'carrot cake']\nfriend_pizzas:list[str] = my_foods[:]\nmy_foods.append('new pizza')\nfriend_pizzas.append('friend new pizza')\nprint('\\nmy favorite pizzas are:')\nfor my_food in my_foods:\n    print(f'-{my_food}')\nprint(\"\\nMy friend's favorite pizzas are:\")\nfor friend_pizza in friend_pizzas:\n    print(f'-{friend_pizza}')",
    "4-12": "fruits:list[str] = [\"apple\", \"banana\", \"cherry\"]\nvegetables:list[str] = [\"carrot\", \"lettuce\", \"onion\"]\nprint(\"Fruits:\")\nfor fruit in fruits:\n    print(fruit)\n\nprint(\"\\nVegetables:\")\nfor vegetable in vegetables:\n    print(vegetable)",
    "4-13": "menu1:tuple[str,str,str,str,str] = ('burger', 'pizza', 'pasta', 'salad', 'ice cream')\n\nprint(\"Original Menu:\")\nfor food in menu1:\n    print(food)\n# menu[2]:str = 'sushi'\n\nmenu2:tuple[str,str,str,str,str] = ('burger', 'pizza', 'sushi', 'fruit salad', 'cake')\n\nprint(\"\\nRevised Menu:\")\nfor food in menu2:\n    print(food)",
    "5-1": "car:str = 'subaru'\nprint('Is car == subaru? I predict True.')\nprint(car == 'subaru')\nprint('Is car == audi? I predict False.')\nprint(car == 'audi')\n\nmy_name:str = 'arman'\nprint('Is my_name == arman? I predict True.')\nprint(my_name == 'arman')\nprint('Is my_name == armans? I predict false.')\nprint(my_name == 'armans')\n\nmy_city:str = 'sialkot'\nprint('Is my_city == sialkot? I predict True.')\nprint(my_city == 'sialkot')\nprint('Is my_city == sialkott? I predict false.')\nprint(my_city == 'sialkott')\n\nmy_country:str = 'pakistan'\nprint('Is my_country == pakistan? I predict True.')\nprint(my_country == 'pakistan')\nprint('Is my_country == pakistann? I predict false.')\nprint(my_country == 'pakistann')\n\ncurrent_prime_minister:str = 'anwar ul haq'\nprint('Is current_prime_minister == anwar ul haq? I predict True.')\nprint(current_prime_minister == 'anwar ul haq')\nprint('Is current_prime_minister == anwar ul haqq? I predict false.')\nprint(current_prime_minister == 'anwar ul haqq')\n\nmy_age:int = 22\nprint('Is my_age == 22 ? I predict True.')\nprint(my_age == 22)\nprint('Is my_age == 22 ? I predict True.')\nprint(my_age == 22)",
    "5-2": "name:str = 'Arman'\nfather_name:str = 'Ashraf'\nage:int = 22\nheight:int = 6\npasstest:bool = True\nfailtest:bool = False\n\nprint(name == 'Arman')\nprint(name == 'arman')\nprint(name != 'arman')\nprint(name != 'Arman')\nprint(name.lower() == 'arman')\nprint(name.lower() == 'Arman')\nprint(age == height)\nprint(age < height)\nprint(age > height)\nprint(age != height)\nprint(age <= height)\nprint(age >= height)\nprint(passtest and failtest)\nprint(passtest or failtest)\n\nfriend_list:list[str] = ['sameer', 'ali', 'bilal']\nprint('sameer' in friend_list)\nprint('ahmad' in friend_list)\nprint('asif' not in friend_list)\nprint('bilal' not in friend_list)",
    "5-3": "alien_color:str= 'green'\nif alien_color == 'green':\n    print('You just earned 5 points!')",
    "5-4": "alien_color:str = 'yellow'\n\nif alien_color == 'green':\n    print('You just earned 5 points!')\n\nelse:\n    print('You just earned 10 points')",
    "5-5": "alien_color:str = 'red'\nif alien_color == 'green':\n    print('You just earned 5 points')\nelif(alien_color == 'yellow'):\n    print('you just earned 10 points')\nelif(alien_color == 'red'):\n    print('you just earned 15 points')",
    "5-6": "age:int = 18\n\nif age < 2:\n    print('You\\'re a baby!')\nelif age < 4:\n    print('You\\'re a toddler!')\nelif age < 13:\n    print('You\\'re a kid!')\nelif age < 20:\n    print('You\\'re a teenager!')\nelif age < 65:\n    print('You\\'re an adult!')\nelse:\n    print('You\\'re an elder!')",
    "5-7": "favorite_fruits:list[str] = ['blueberries', 'apples', 'peaches']\n\nif ('bananas' in favorite_fruits):\n    print('You really like bananas!')\nif ('apples' in favorite_fruits):\n    print('You really like apples!')\nif ('blueberries' in favorite_fruits):\n    print('You really like blueberries!')\nif ('kiwis' in favorite_fruits):\n    print('You really like kiwis!')\nif ('peaches' in favorite_fruits):\n    print('You really like peaches!')",
    "5-8": "usernames:list[str] = ['ali', 'arman', 'admin', 'usman', 'asad']\n\nfor username in usernames:\n    if username == 'admin':\n        print('Hello admin, would you like to see a status report?')\n    else:\n        print(f'Hello {username }, thank you for logging in again!')",
    "5-9": "usernames:list[str] = ['ali', 'arman', 'admin', 'usman', 'asad']\n# usernames:list[None|str] = []\n \nif usernames:\n    for username in usernames:\n        if username == 'admin':\n            print('Hello admin, would you like to see a status report?')\n        else:\n            print(f'Hello {username}, thank you for logging in again!')\nelse:\n    print('We need to find some users!')",
    "5-10": "current_users:list[str] = ['ali','asad','zain','arman','arman']\nnew_users:list[str] = ['ali','Asad','saad','sameer','mazher']\ncurrent_users_lower:list[None|str] = [user.lower() for user in current_users]\n\nfor new_user in new_users:\n    if new_user.lower() in current_users_lower:\n        print(f'{new_user} is already taken. You will need to enter a new username.')\n    else:\n        print(f'{new_user} is available.')",
    "5-11": "numbers:list[int] = list(range(1,10))\n\nfor number in numbers:\n    if number == 1:\n        print('1st')\n    elif number == 2:\n        print('2nd')\n    elif number == 3:\n        print('3rd')\n    else:\n        print(str(number) + 'th')",
    "6-1": "from typing import Dict\n\nbio_data:Dict[str,str|int] = {'first_name': 'Arman', 'last_name': 'Muhammad Ashraf', 'age': 22, 'city': 'sialkot'}\nfor key, value in bio_data.items():\n    print(f'{key}: {value}')",
    "6-2": "from typing import Dict\n\nfavorite_numbers:Dict[str,int] = {'ali': 1, 'ahmad': 2, 'asad': 3, 'usman': 4, 'arman': 5}\nfor name, number in favorite_numbers.items():\n    print(f'{name} favorite number is {number}')",
    "6-3": "from typing import Dict\n\nfive_programming_words:Dict[str,str] = {'get': 'get is used to get the item from the dictionary if not exist it gives none', 'set': 'Set is a data type one point is noted that set is mutable but its elements are immutable', 'Dict': 'Dict is just like a JavaScript Object for understanding', 'key': 'In Dictionary Key must be unique and immutable', 'value': 'In Dictionary Value may be list, tuple ...'}\nfor word, meaning in five_programming_words.items():\n  print(f'{word}:  {meaning}')",
    "6-4": "from typing import Dict\n\nfive_programming_words:Dict[str,str] = {'get': 'get is used to get the item from the dictionary if not exist it gives none', 'set': 'Set is a data type one point is noted that set is mutable but its elements are immutable', 'Dict': 'Dict is just like a JavaScript Object for understanding', 'key': 'In Dictionary Key must be unique and immutable', 'value': 'In Dictionary Value may be list, tuple ...', 'if': 'for condition checking', 'loop': 'iteration', 'continue': 'skipping the value in loop', 'break': 'loop end', 'function': 'cde again and again use in our code'}\nfor word, meaning in five_programming_words.items():\n    print(f'{word}:  {meaning}')",
    "6-5": "from typing import Dict\n\nrivers:Dict[str,str] = {'nile': 'egypt', 'mississippi': 'united states', 'fraser': 'canada', 'kuskokwim': 'alaska', 'yangtze': 'china'}\nfor river, country in rivers.items():\n    print(f'The {river.upper()} runs through {country.title()}')\nprint('The following rivers are included in this data set:')\nfor river in rivers.keys():\n    print(f'- {river.title()}')\nprint('The following countries are included in this data set:')\nfor country in rivers.values():\n    print(f'- {country.title()}')",
    "6-6": "from typing import Dict\n\nfavorite_languages:Dict[str,str] = {'jen': 'python', 'sarah': 'c', 'edward': 'rust', 'phil': 'python'}\npeople_list:list[str] = ['jen', 'sarah', 'ali', 'zain', 'asad']\nfor people in people_list:\n    if people in favorite_languages.keys():\n        print(f'Thank you, {people}, for polling us.')\n    else:\n        print(f'{people}, what\\'s your favorite language?')",
    "6-7": "from typing import Dict\n\nbio_data0:Dict[str,str|int] = {'first_name': 'Arman', 'last_name': 'Muhammad Ashraf', 'age': 22, 'city': 'sialkot'}\nbio_data1:Dict[str,str|int] = {'first_name': 'zaman', 'last_name': 'Muhammad Ashraf', 'age': 32, 'city': 'sialkot'}\nbio_data2:Dict[str,str|int] = {'first_name': 'usman', 'last_name': 'Muhammad Ashraf', 'age': 26, 'city': 'sialkot'}\nlist_bio_data:list[Dict[str,str]] = [bio_data0, bio_data1, bio_data2]\nfor single_value in list_bio_data:\n    for bio_key, bio_data in single_value.items():\n        print(f'{bio_key} :{bio_data}')\n    ",
    "6-8": "from typing import Dict\n\npet_1:Dict[str,str] = {'animal': 'animal_1', 'owner_name': 'x'}\npet_2:Dict[str,str] = {'animal': 'animal_2', 'owner_name': 'y'}\npet_3:Dict[str,str] = {'animal': 'animal_3', 'owner_name': 'z'}\npet_4:Dict[str,str] = {'animal': 'animal_4', 'owner_name': 'a'}\npet_list:list[Dict[str,str]] = [pet_1, pet_2, pet_3, pet_4]\nfor item in pet_list:\n    print(f'This pet is a {item['animal']} and the owner\\'s name is {item['owner_name']}.')",
    "6-9": "from typing import Dict\n\nfavorite_places:Dict[str,list[str]] = {'ali': ['lahore', 'sialkot', 'multan'], 'arman': ['islamabad', 'karachi', 'johar town'], 'asad': ['murree', 'gujrat', 'sargodha']}\nfor name, places in favorite_places.items():\n    print(f'Welcome to {name} and your favorite places are: ')\n    for place in places:\n        print(f' -{place}')",
    "6-10": "from typing import Dict\n\nfavorite_numbers:Dict[str,list[int]] = {'ali': [1, 2], 'ahmad': [2, 3], 'asad': [3, 4], 'usman': [4, 5], 'arman': [5, 6]}\nfor name, favorite_number in favorite_numbers.items():\n    print(f'{name} favorite number are')\n    for num in favorite_number:\n        print(f'_{num}')",
    "6-11": "from typing import Dict\n\ncities:Dict[str,Dict[str,str|int]] = {'sialkot': {'country': 'pakistan', 'population': 10, 'nearby mountains': 'k2'}, 'lahore': {'country': 'pakistan', 'population': 876, 'nearby mountains': 'k2'}, 'islamabad': {'country': 'pakistan', 'population': 20, 'nearby mountains': 'k2'}}\nfor city, city_info in cities.items():\n    print(f\"{city.title()} is in {city_info['country'].title()}.\")\n    print(f\"  It has a population of about {city_info['population']}.\")\n    print(f\"  The {city_info['nearby mountains'].title()} mounats are nearby.\")",
    "6-12": "from typing import Dict\n\nprevious_obj:Dict[str,str|int] = {'name': 'arman'}\nprevious_obj['name'] = 'M arman'\nprevious_obj['age']  = 22\nprint(previous_obj)",
    "7-1": "rental_car:str = input('What kind of car would you like? ')\nprint(f\"Let me see if I can find you a {rental_car.title()}.\")",
    "7-2": "seating:int = int(input('How many people are in your dinner party tonight? '))\nif seating > 8:\n    print(\"I'm sorry, you'll have to wait for a table.\")\nelse:\n    print(\"Your table is ready.\")",
    "7-3": "multiples:int = int(input('Give me a number, please: '))\nif multiples % 10 == 0:\n    print(f'{multiples} is a multiple of 10.')\nelse:\n    print(f'{multiples} is not a multiple of 10.')",
    "7-4": "prompt:str = \"What topping would you like on your pizza?\"\nprompt += \"Enter 'quit' when you are finished: \"\n\nwhile True:\n    pizza_topping:str = input(prompt)\n    if pizza_topping != 'quit':\n        print(f'I\\'ll add {pizza_topping} to your pizza.')\n    else:\n        break",
    "7-5": "age_prompt:str = 'How old are you? '\nage_prompt += \"Enter \\'quit\\' when you are finished.\"\n\nwhile True:\n    age:str = input(age_prompt)\n    if age == 'quit':\n        break\n    age:int = int(age)\n    if age < 3:\n        print('You get in free!')\n    elif age < 13:\n        print('Your ticket is $10.')\n    else:\n        print('Your ticket is $15.')",
    "7-6": "flag:bool = True\nwhile flag:\n    pizza_topping:str = input('What topping would you like on your pizza? ')\n    if pizza_topping != 'quit':\n        print(f'Adding {pizza_topping} to your pizza.')\n    else:\n        flag = False",
    "7-7": "n:int = 2\nwhile n < 4:\n    print(n)",
    "7-8": "from typing import Optional\n\nsandwich_orders:list[str] = ['sandwich_1', 'sandwich_2', 'sandwich_3']\nfinished_sandwiches:list[Optional[str]] = []\n\nwhile sandwich_orders:\n    current_sandwich:str|None = sandwich_orders.pop()\n    print(f'I made your {current_sandwich} sandwich.')\n    finished_sandwiches.append(current_sandwich)\n\nprint('Here are the sandwiches made:')\nfor sandwich in finished_sandwiches:\n    print(sandwich)",
    "7-9": "from typing import Optional\n\nsandwich_orders:list[str] = ['pastrami', 'turkey', 'pastrami', 'ham', 'pastrami', 'roast beef', 'chicken', 'pastrami']\nsandwich_finished:list[Optional[str]] = []\n\nprint('Sorry, the deli has run out of pastrami.')\n\nwhile 'pastrami' in sandwich_orders:\n    sandwich_orders.remove('pastrami')\n\nwhile sandwich_orders:\n    removed:str|None = sandwich_orders.pop()\n    sandwich_finished.append(removed)\n\nprint('List of Finished Sandwiches:')\nfor sandwich in sandwich_finished:\n    print(sandwich)",
    "7-10": "from typing import Optional,Dict\n\nresponses:Dict[Optional[str],Optional[str]] = {}\nwhile True:\n    name:str = input(\"What's your name? \")\n    place:str = input(\"If you could visit one place in the world, where would it be? \")\n    responses[name]= place\n    repeat:str = input(\"Would you like to let someone else respond? (yes/no) \")\n    if repeat != 'yes':\n        break\nprint(\"--- Results ---\")\nfor name, place in responses.items():\n    print(f\"{name.title()} would like to visit {place.title()}.\")",
   "8-1": "def display_message()->None:\n    print('I am learning python')\n\ndisplay_message()",
    "8-2": "def favorite_book(title: str) -> None:\n    print(f'One of my favorite books is {title}')\n\nfavorite_book('Alice in Wonderland')",
    "8-3": "def make_shirt(size: int, msg: str) -> None:\n    print(f'I have a {msg} shirt whose size is {size}')\n\nmake_shirt(36, 'very nice')\nmake_shirt(size=36, msg='very nice')\nmake_shirt(msg='very nice', size=36)",
    "8-4": "def make_shirt(size: str = 'large', msg: str = 'I love Python') -> None:\n    print(f'{msg} shirt whose size is {size}')\n\nmake_shirt()\nmake_shirt(size='medium')\nmake_shirt('Normal', 'I love so much Python')",
    "8-5": "def describe_city(name: str, country: str = 'Pakistan') -> None:\n    print(f'{name} is in {country}')\n\ndescribe_city('Sialkot')\ndescribe_city('Karachi', 'Islamic Republic of Pakistan')\ndescribe_city('Islamabad')",
    "8-6": "def city_country(city_name: str, country: str) -> str:\n    return f'{city_name}, {country}'\n\nprint(city_country('Islamabad', 'Pakistan'))\nprint(city_country('Paris', 'France'))",
    "8-7": "from typing import Dict\n\ndef make_album(artist_name: str, album_title: str, tracks: int = 0) -> Dict[str, str|int]:\n    album_info: Dict[str, str|int] = {'artist': artist_name, 'title': album_title}\n    if tracks:\n        album_info['tracks'] = tracks\n    return album_info\n\nalbum1 = make_album('ali', 'i am ali')\nprint(album1)\nalbum2 = make_album('zain', 'i am zain')\nprint(album2)\nalbum3 = make_album('saad', 'i am saad', 20)\nprint(album3)",
    "8-8": "from typing import Dict,Optional\n\nempty_dict: Dict[Optional[str], Optional[str]] = {}\n\nwhile True:\n    artist_input:str = input('Please enter the name of the artist: ')\n    if artist_input.lower() == 'quit':\n        break\n    title_input:str = input('Please enter the title of the album: ')\n    if title_input.lower() == 'quit':\n        break\n    output = make_album(artist_input, title_input)\n    print(output)\n\nprint('\\nThanks for responding!')",
    "8-9": "def show_messages(messages: list[str]) -> None:\n    for msg in messages:\n        print(msg)\n\nmessages:list[str] = ['My name is arman', 'I am 22 years old']\nshow_messages(messages)",
    "8-10": "from typing import Optional\n\ndef send_messages(messages: list[str]) -> list[Optional[str]]:\n    sent_messages: list[Optional[str]] = []\n    while messages:\n        msg:str = messages.pop()\n        sent_messages.append(msg)\n        print(f'sending message {msg}')\n    return sent_messages\n\nmessages:list[str] = ['My name is arman', 'I am 22 years old', 'I am from Pakistan']\nsent_messages = send_messages(messages)\nprint(sent_messages)\nprint(messages)",
    "8-11": "from typing import Optional\n\ndef send_messages(messages: list[str]) -> list[Optional[str]]:\n    sent_messages: list[Optional[str]] = []\n    while messages:\n        msg:str = messages.pop()\n        sent_messages.append(msg)\n        print(f'sending message {msg}')\n    return sent_messages\n\nmessages:list[str] = ['My name is arman', 'I am 22 years old', 'I am from Pakistan']\nsent_messages = send_messages(messages[:])\nprint(sent_messages)\nprint(messages)",
    "8-12": "def make_sandwich(*items: str) -> None:\n    print('\\nI\\'ll make you a great sandwich:')\n    for item in items:\n        print(f'  ...adding {item} to your sandwich.')\n    print('Your sandwich is ready!')\n\nmake_sandwich('roast beef', 'cheddar cheese', 'lettuce', 'honey dijon')\nmake_sandwich('turkey', 'apple slices', 'honey mustard')\nmake_sandwich('peanut butter', 'strawberry jam')",
    "8-13": "from typing import Dict\n\n\ndef build_profile(first: str, last: str, **user_info: str) -> Dict[str, str]:\n    user_info['first_name'] = first\n    user_info['last_name'] = last\n    return user_info\n\nuser_profile = build_profile('arman', 'ashraf',\n                             location='Pakistan',\n                             field='mathematics')\nprint(user_profile)",
    "8-14": "from typing import Dict\n\n\ndef make_car(manufacturer: str, model: str, **car_info:str|int|bool) -> Dict[str, str|int|bool]:\n    car: Dict[str, str|int|bool] = {'manufacturer': manufacturer, 'model': model}\n    for key, value in car_info.items():\n        car[key] = value\n    return car\n\ncar = make_car('subaru', 'outback', color='blue', tow_package=True)\nprint(car)\ncar1 = make_car('subaru', 'outback', color='white', tow_package=True)\nprint(car1)\ncar2 = make_car('honda', 'accord', year=1991, color='white', headlights='popup')\nprint(car2)",
    "8-15": " # This is a printing_function.py file and uncomment import statment \ndef print_models(unprinted_designs:list[str], completed_models:list[str]):\n    while unprinted_designs:\n        current_design = unprinted_designs.pop() \n        print(f'Printing model: {current_design}')\n        completed_models.append(current_design)\n\n\ndef show_completed_models(completed_models): \n    print(\"\\nThe following models have been printed:\")\n    for completed_model in completed_models:\n        print(completed_model)\nfrom typing import Optional\n#import printing_functions as pf\n\nunprinted_designs:list[str] = ['iphone case', 'robot pendant', 'dodecahedron']\ncompleted_models:list[Optional[str]] = []\n\npf.print_models(unprinted_designs, completed_models)\npf.show_completed_models(completed_models)",
    "8-16": "# This is summodule.py file and uncomment the import statment \ndef sum_fun(par1, *num:int) -> int:\n    return sum(list(num), par1)\ndef max_fun(*num:int) -> int:\n    return max(list(num))\ndef this_function_find_the_minimum_value_in_the_list(*num:int) -> int:\n    return min(list(num))\n#This is a multiplymodule.py file \ndef mult_fun(par1:int,part2:int)->int:\n    return  par1*part2  \n#import summodule\n#from summodule import sum_fun\n#from summodule import this_function_find_the_minimum_value_in_the_list as minfun\n#import multiplymodule as mp\n#from summodule import *\n\nfind_max:int=summodule.max_fun(2,3,4,5)\nprint(find_max)\n\nfind_sum:int=summodule.sum_fun(2,3,4,5)\nprint(find_sum)\n\nmin_funs:int=minfun(2,3,4,5)\nprint(min_funs)\n\nmin_funs:int=mp.mult_fun(4,5)\nprint(min_funs)\n\nmax_funs:int=max_fun(4,5)\nprint(max_funs)",
    "8-17": "#Here are some general guidelines you can follow to ensure your programs adhere to styling conventions:\n\n#Indentation: Use 4 spaces for indentation. Avoid tabs.\n#Line Length: Limit lines to 79 characters to ensure readability.\n#Whitespace: Use whitespace appropriately to improve readability. Separate functions and classes with two blank lines.\n#Use blank lines sparingly within functions to group related code.\n#Naming Conventions: Use snake_case for function and variable names. Use ALL_CAPS for constants. Use CamelCase for class names.\n#Comments: Use descriptive comments to explain the purpose of functions, classes, and complex code blocks. Keep comments concise and up-to-date.\n#Imports: Group imports into three sections: standard library imports, related third-party imports, and local application/library specific imports. Separate each section with a blank line. Avoid using wildcard imports (from module import *).\n#Function Length: Aim for short and focused functions. If a function is too long or complex, consider breaking it up into smaller functions.\n#Docstrings: Include docstrings for all functions, classes, and modules to describe their purpose, arguments, and return values. Follow the Google Python Style Guide for docstring formatting.\n#Docstrings, short for 'documentation strings,' are string literals that appear as the first statement in a module, function, class, or method definition. They are used to provide documentation about the purpose, usage, and behavior of the code entity they are associated with.\n\n#Docstrings serve as a form of inline documentation that helps developers understand how to use and interact with the code. They provide a concise summary of what the code does, its parameters, return values, and any other relevant information.",
    "9-1": "class Restaurant:\n    def __init__(self, restaurant_name:str, cuisine_type:str)->None:\n        self.restaurant_name = restaurant_name\n        self.cuisine_type = cuisine_type\n    def describe_restaurant(self)->None:\n        print(f'The restaurant\\'s name is {self.restaurant_name}.')\n        print(f'The cuisine type is {self.cuisine_type}.')\n    def open_restaurant(self)->None:\n        print(f'{self.restaurant_name} is now open!')\nrestaurant:Restaurant = Restaurant('The Great Delight', 'Italian')\nprint('Restaurant Name:', restaurant.restaurant_name)\nprint('Cuisine Type:', restaurant.cuisine_type)\nrestaurant.describe_restaurant()\nrestaurant.open_restaurant()",
    "9-2": "class Restaurant:\n    def __init__(self, restaurant_name:str, cuisine_type:str)->None:\n        self.restaurant_name = restaurant_name\n        self.cuisine_type = cuisine_type\n    def describe_restaurant(self)->None:\n        print(f'The restaurant\\'s name is {self.restaurant_name}.')\n        print(f'The cuisine type is {self.cuisine_type}.')\n    def open_restaurant(self)->None:\n        print(f'{self.restaurant_name} is now open!')\nrestaurant1:Restaurant = Restaurant('Food Palace', 'Chinese')\nrestaurant2:Restaurant = Restaurant('The Sizzler', 'Steakhouse')\nrestaurant3:Restaurant = Restaurant('Pizza Planet', 'Pizza')\nrestaurant1.describe_restaurant()\nrestaurant2.describe_restaurant()\nrestaurant3.describe_restaurant()",
    "9-3": "class User:\n    def __init__(self, first_name:str, last_name:str, age:int, gender:str, email:str)->None:\n        self.first_name = first_name\n        self.last_name = last_name\n        self.age = age\n        self.gender = gender\n        self.email = email\n    def describe_user(self)->None:\n        print(f'User Information:\\nFirst Name: {self.first_name}\\nLast Name: {self.last_name}\\nAge: {self.age}\\nGender: {self.gender}\\nEmail: {self.email}')\n    def greet_user(self)->None:\n        print(f'Hello, {self.first_name}! Welcome back.')\nuser1:User = User('John', 'Doe', 30, 'Male', 'john@example.com')\nuser2:User = User('Jane', 'Smith', 25, 'Female', 'jane@example.com')\nuser3:User = User('Alice', 'Johnson', 40, 'Female', 'alice@example.com')\nuser1.describe_user()\nuser1.greet_user()\nuser2.describe_user()\nuser2.greet_user()\nuser3.describe_user()\nuser3.greet_user()",
    "9-4": "class Restaurant:\n    def __init__(self, restaurant_name:str, cuisine_type:str)->None:\n        self.restaurant_name = restaurant_name\n        self.cuisine_type = cuisine_type\n        self.number_served = 0\n    def describe_restaurant(self)->None:\n        print(f'The restaurant\\'s name is {self.restaurant_name}.')\n        print(f'The cuisine type is {self.cuisine_type}.')\n    def open_restaurant(self)->None:\n        print(f'{self.restaurant_name} is now open!')\n    def set_number_served(self, number_served):\n        self.number_served = number_served\n    def increment_number_served(self, additional_served):\n        self.number_served += additional_served\nrestaurant:Restaurant = Restaurant('The Great Delight', 'Italian')\nprint('Number of customers served:', restaurant.number_served)\nrestaurant.number_served = 100\nprint('Number of customers served:', restaurant.number_served)\nrestaurant.set_number_served(200)\nprint('Number of customers served:', restaurant.number_served)\nrestaurant.increment_number_served(50)\nprint('Number of customers served:', restaurant.number_served)",
    "9-5": "class User:\n    def __init__(self, first_name:str, last_name:str, age:int, gender:str, email:str)->None:\n        self.first_name = first_name\n        self.last_name = last_name\n        self.age = age\n        self.gender = gender\n        self.email = email\n        self.login_attempts = 0\n    def describe_user(self)->None:\n        print(f'User Information:\\nFirst Name: {self.first_name}\\nLast Name: {self.last_name}\\nAge: {self.age}\\nGender: {self.gender}\\nEmail: {self.email}')\n    def greet_user(self)->None:\n        print(f'Hello, {self.first_name}! Welcome back.')\n    def increment_login_attempts(self)->None:\n        self.login_attempts += 1\n    def reset_login_attempts(self)->None:\n        self.login_attempts = 0\nuser:User = User('John', 'Doe', 30, 'Male', 'john@example.com')\nuser.increment_login_attempts()\nuser.increment_login_attempts()\nuser.increment_login_attempts()\nprint('Login Attempts:', user.login_attempts)\nuser.reset_login_attempts()\nprint('Login Attempts:', user.login_attempts)",
    "9-6": "from typing import Optional, List\n\nclass Restaurant:\n    def __init__(self, restaurant_name: str, cuisine_type: str) -> None:\n        self.restaurant: str = restaurant_name\n        self.cuisine: str = cuisine_type\n\n    def describe_restaurant(self) -> None:\n        print(f'Restaurant Name: {self.restaurant}')\n        print(f'Cuisine Type: {self.cuisine}')\n\n    def open_restaurant(self) -> None:\n        print(f'{self.restaurant} is open')\n\n\nclass IceCreamStand(Restaurant):\n    def __init__(self, restaurant_name: str, cuisine_type: str, suggestion: str) -> None:\n        super().__init__(restaurant_name, cuisine_type)\n        self.suggestion: str = suggestion\n        self.flavors: List[Optional[str]] = []\n\n    def display_flavors(self) -> None:\n        print(\"Available Ice Cream Flavors:\")\n        for flavor in self.flavors:\n            print(flavor)\n\n\nice_cream_stand = IceCreamStand(\"Ice Cream Paradise\", \"Ice Cream\", 'very nice')\nice_cream_stand.flavors = [\"Chocolate\", \"Vanilla\", \"Strawberry\", \"Mint\", \"Cookie Dough\"]\nprint(ice_cream_stand.suggestion)\nice_cream_stand.display_flavors()\n",
    "9-7": "class User:\n    def __init__(self, first_name: str, last_name: str, age: int, height: float) -> None:\n        self.firstName = first_name\n        self.lastName = last_name\n        self.age = age\n        self.height = height\n        self.login = 0\n\n    def describe_user(self) -> None:\n        print(f'My name is {self.firstName} {self.lastName}. I am {self.age} years old. My height is {self.height} and login value is {self.login}')\n\n    def greet_user(self) -> None:\n        print(f'Welcome back {self.firstName}')\n\n    def increment_login_attempts(self) -> None:\n        self.login += 1\n        print(self.login)\n\n    def reset_login_attempts(self) -> None:\n        self.login = 0\n\n\nclass Admin(User):\n    def __init__(self, first_name: str, last_name: str, age: int, height: float) -> None:\n        super().__init__(first_name, last_name, age, height)\n        self.privileges: list[str] = []\n\n    def show_privileges(self) -> None:\n        for privilege in self.privileges:\n            print(f'List of privileges: {privilege}')\n\n\nfirst_user = Admin('Arman', 'Ashraf', 22, 5.11)\n\nfirst_user.show_privileges()\n\nfirst_user.privileges = [\n    'can reset passwords',\n    'can moderate discussions',\n    'can suspend accounts',\n]\n\nfirst_user.show_privileges()",
    "9-8": "class User:\n    def __init__(self,first_name:str,last_name:str,age:int,height:float) -> None:\n        self.firstName=first_name\n        self.lastName=last_name\n        self.age=age\n        self.height=height\n        self.login=0\n    def describe_user(self)->str:\n       return f'My name is {self.firstName}{self.lastName}. I am {self.age} old. and my height is {self.height} and login value is {self.login}'\n    def greet_user(self)->None:\n        print(f'Welcome back {self.firstName}')\n    def increment_login_attempts(self)->None:\n        self.login+=1\n        print(self.login)   \n    def reset_login_attempts(self)->None:\n        self.login=0     \nclass Admin(User):\n    def __init__(self,first_name:str,last_name:str,age:int,height:float)->None:\n        super().__init__(first_name,last_name,age,height)\n        self.privileges=Privileges()\nclass Privileges():\n    def __init__(self,privileges=[]) -> None:\n        self.privileges=privileges\n    def show_privileges(self):\n        if self.privileges:\n            for pre in self.privileges:\n                print(pre)\n        else:\n            print('there is no priviliges')        \n\n\nnewadmin:Admin =  Admin('ali','ahmad',3,3.3) \nprint(newadmin.age)    \nprint(newadmin.describe_user()) \nnewadmin.privileges.privileges=['reset passwords','change password','facebook server down']\nnewadmin.privileges.show_privileges() \n",
    "9-9": "class Car:\n    def __init__(self, make, model, year):\n        self.make = make\n        self.model = model\n        self.year = year\n        self.odometer_reading = 0\n    def get_descriptive_name(self):\n        long_name = f'{self.year} {self.make} {self.model}'\n        return long_name.title()\n    def read_odometer(self):\n        print(f'This car has {self.odometer_reading} miles on it.')\n    def update_odometer(self, mileage):\n        if mileage >= self.odometer_reading:\n            self.odometer_reading = mileage\n        else:\n            print('You can\\'t roll back an odometer!')\n    def increment_odometer(self, miles):\n        self.odometer_reading += miles\nclass ElectricCar(Car): \n    def __init__(self, make, model, year):\n        super().__init__(make, model, year)\n        self.battery = Battery()       \nclass Battery:\n    def __init__(self, battery_size=60):\n        self.battery_size = battery_size\n    def describe_battery(self):\n        print(f'This car has a {self.battery_size}-kWh battery.')\n    def upgrade_battery(self):\n        if self.battery_size == 60:\n            self.battery_size = 65\n            print(f'Upgrading battery size to {self.battery_size}')\n        else:\n            print('Battery is full!')\n    def get_range(self):\n        if self.battery_size == 60:\n            range = 260\n        elif self.battery_size == 100:\n            range = 315\n        else:\n            range = 0\n        print(f'This car can go approximately {range} miles on a full charge.')\n\nprint('Make an electric car, and check the battery:')\nmy_tesla:ElectricCar = ElectricCar('tesla', 'model','s', 2024)\nmy_tesla.battery.describe_battery()\n\nprint('\\nUpgrade the battery, and check it again:')\nmy_tesla.battery.upgrade_battery()\nmy_tesla.battery.describe_battery()\n\nprint('\\nTry upgrading the battery a second time.')\nmy_tesla.battery.upgrade_battery()\nmy_tesla.battery.describe_battery()",
    "9-10": "# This is a restaurant file and uncomment the import statement\nclass Restaurant:\n    def __init__(self, restaurant_name:str, cuisine_type:str)->None:\n        self.restaurant_name = restaurant_name\n        self.cuisine_type = cuisine_type\n        self.number_served = 0\n    def describe_restaurant(self)->None:\n        print(f'The restaurant\\'s name is {self.restaurant_name}.')\n        print(f'The cuisine type is {self.cuisine_type}.')\n    def open_restaurant(self)->None:\n        print(f'{self.restaurant_name} is now open!')\n    def set_number_served(self, number_served):\n        self.number_served = number_served\n    def increment_number_served(self, additional_served):\n        self.number_served += additional_served\n#from restaurant.restaurant import Restaurant\n\nrestaurant = Restaurant('Aone pizza shop', 'pizza')\nrestaurant.describe_restaurant()\nrestaurant.open_restaurant()",
    "9-11": "# This is a myadmin file and uncomment the import statement\nclass User:\n    def __init__(self,first_name:str,last_name:str,age:int,height:float) -> None:\n        self.firstName=first_name\n        self.lastName=last_name\n        self.age=age\n        self.height=height\n        self.login=0\n    def describe_user(self)->str:\n       return f'My name is {self.firstName}{self.lastName}. I am {self.age} old. and my height is {self.height} and login value is {self.login}'\n    def greet_user(self)->None:\n        print(f'Welcome back {self.firstName}')\n    def increment_login_attempts(self)->None:\n        self.login+=1\n        print(self.login)   \n    def reset_login_attempts(self)->None:\n        self.login=0     \nclass Admin(User):\n    def __init__(self,first_name:str,last_name:str,age:int,height:float)->None:\n        super().__init__(first_name,last_name,age,height)\n        self.privileges=Privileges()\nclass Privileges():\n    def __init__(self,privileges=[]) -> None:\n        self.privileges=privileges\n    def show_privileges(self):\n        if self.privileges:\n            for pre in self.privileges:\n                print(pre)\n        else:\n            print('there is no priviliges')  \n#from myadmin.myadmin import Admin\n\nnewadmin = Admin('ali','ahmad',3,3.3)\nprint(newadmin.age)\nnewadmin.describe_user()\nnewadmin.privileges.privileges = ['reset passwords','change password','facebook server down']\nnewadmin.privileges.show_privileges()\nprint(newadmin.age)",
    "9-12": "# This is a user class file and uncomment the import statement\nclass User:\n    def __init__(self,first_name:str,last_name:str,age:int,height:float) -> None:\n        self.firstName=first_name\n        self.lastName=last_name\n        self.age=age\n        self.height=height\n        self.login=0\n    def describe_user(self)->str:\n       return f'My name is {self.firstName}{self.lastName}. I am {self.age} old. and my height is {self.height} and login value is {self.login}'\n    def greet_user(self)->None:\n        print(f'Welcome back {self.firstName}')\n    def increment_login_attempts(self)->None:\n        self.login+=1\n        print(self.login)   \n    def reset_login_attempts(self)->None:\n        self.login=0\n#This is Privileges file uncomment the import statement \nclass Privileges():\n    def __init__(self,privileges=[]) -> None:\n        self.privileges=privileges\n    def show_privileges(self):\n        if self.privileges:\n            for pre in self.privileges:\n                print(pre)\n        else:\n            print('there is no priviliges')  \n# This is newadmin file uncomment the import statement \n#from user_class import User\n#from Privileges import Privileges     \nclass Admin(User):\n    def __init__(self,first_name:str,last_name:str,age:int,height:float)->None:\n        super().__init__(first_name,last_name,age,height)\n        self.privileges=Privileges()    \n#from newadmin.newadmin import Admin\n\nnewadmin = Admin('alid', 'ahmad', 3, 3.3)\nprint(newadmin.age)\nprint(newadmin.describe_user())\nnewadmin.privileges.privileges = ['reset passwords', 'change password', 'facebook server down']\nnewadmin.privileges.show_privileges()",
    
    "9-13": "from random import randint\n\nclass Die:\n    def __init__(self, sides: int = 6) -> None:\n        self.sides = sides\n\n    def roll_die(self) -> int:\n        return randint(1, self.sides)\n\n\ndie6 = Die()\ndata6 = [die6.roll_die() for _ in range(10)]\nprint('10 rolls of a 6-sided die:')\nprint(data6)\n\ndie10 = Die(10)\ndata10 = [die10.roll_die() for _ in range(10)]\nprint('10 rolls of a 10-sided die:')\nprint(data10)\n\ndie20 = Die(20)\ndata20 = [die20.roll_die() for _ in range(10)]\nprint('10 rolls of a 20-sided die:')\nprint(data20)",
    "9-14": "from random import choice\n\nprint('We see a list of winning tickets')\nwinning_list = []\nlist_of_numbers_letters = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'a', 'b', 'c', 'd', 'e']\n\nwhile len(winning_list) < 4:\n    current_choice = choice(list_of_numbers_letters)\n    if current_choice not in winning_list:\n        winning_list.append(current_choice)\n\nprint(f'The final winning ticket is {winning_list}')",
    "9-15": "from random import choice\n\ndef get_winning_ticket(no_of_possibilities: list[str|int]) -> list[str|int]:\n    winning_ticket_list = []\n    while len(winning_ticket_list) < 4:\n        selected_item = choice(no_of_possibilities)\n        if selected_item not in winning_ticket_list:\n            winning_ticket_list.append(selected_item)\n    return winning_ticket_list\n\n\ndef make_random_ticket(no_of_possibilities: list[int|str]) -> list[str|int]:\n    make_randam_ticket = []\n    while len(make_randam_ticket) < 4:\n        selected_item = choice(no_of_possibilities)\n        if selected_item not in make_randam_ticket:\n            make_randam_ticket.append(selected_item)\n    return make_randam_ticket\n\n\ndef check_ticket(new_make_random_ticket: list[int|str], winning_ticket_list: list[int|str]) -> bool:\n    for element in new_make_random_ticket:\n        if element not in winning_ticket_list:\n            return False\n    return True\n\n\nno_of_possibilities = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'a', 'b', 'c', 'd', 'e']\nnew_winning_ticket_list = get_winning_ticket(no_of_possibilities)\n\nplays = 0\nwon = False\nmax_tries = 1000333\n\nwhile not won and plays < max_tries:\n    new_make_random_ticket = make_random_ticket(no_of_possibilities)\n    won = check_ticket(new_make_random_ticket, new_winning_ticket_list)\n    plays += 1\n\nif won:\n    print(\"Congratulations! You have a winning ticket!\")\n    print(f\"Your ticket numbers: {new_make_random_ticket}\")\n    print(f\"Winning ticket numbers: {new_winning_ticket_list}\")\n    print(f\"It took you only {plays} attempts to win!\")\nelse:\n    print(f\"After {plays} attempts, unfortunately, no winning ticket was drawn.\")\n    print(f\"Your ticket numbers: {new_make_random_ticket}\")\n    print(f\"Winning ticket numbers: {new_winning_ticket_list}\")",
    "9-16": "import math\n\nprint(math.pi)",
   "10-1": "with open('learning_python.txt') as lp:\n    reads = lp.read()\n    print(reads)\n    print('==================')\n    print(reads)\n    reads = lp.readlines()\n    [print(reads_line) for reads_line in list(reads)]\n# OR\nfrom pathlib import Path\npath = Path('learning_python.txt')\n\nprint(path.read_text())\nprint('++++++++++++++++++++++++++++')\ncontents = path.read_text()\nlines = contents.splitlines()\n[print(line) for line in lines]",
    "10-2": "from pathlib import Path\npath=Path('learning_python.txt')\nreads = path.read_text()\nprint(reads)\nlinebyline = reads.splitlines()\nfor i in linebyline:\n    print(i.replace('Python', 'C'))\n# OR \nwith open('learning_python.txt') as lp:\n    reads=lp.read()\n    replace=reads.replace('Python','C')\n    print(reads)\n    print(replace)",
    "10-3": "filename = 'learning_python.txt'\n\nwith open(filename) as file_object:\n    for line in file_object.read().splitlines():\n        print(line)",
    "10-4": "from pathlib import  Path\nuser_name:str =input(\"Please enter your Name\")\npath=Path('guest.txt')\npath.write_text(user_name)",
    "10-5": "prompt ='Please enter your name\\n'\nprompt +='\\nEnter quite if this are is no more names'\n \n\nguest_list:list[str]=[]\nwhile True:\n    user_name:str =input(prompt)\n    if user_name.lower() !='quit':\n        guest_list.append(user_name)\n        print(f'We are adding {user_name} to the guest list')\n    else:\n        break\n \nwith open('guest_book.txt','w') as file:\n    for guest in guest_list:\n        file.write(guest+'\\n')",
    "10-6": "try:\n    num1:int = int(input('Please Enter the first number')) \n    num2:int = int(input('Please Enter the second number')) \nexcept ValueError:\n     print('Please enter a number')    \nelse:\n    print(num1+num2)     ",
   "10-7": "while True:\n    try:\n        num_one:str = input('Please Enter the first number: ')\n        if num_one.lower() == 'quit':\n            print('Program is finished.')\n            break\n        num1:int = int(num_one)\n        \n        num_two:str = input('Please Enter the second number: ')\n        if num_two.lower == 'quit':\n            print('Program is finished.')\n            break\n        num2:int = int(num_two)\n        \n        print(num1 + num2)\n    except ValueError:\n        print('Please enter valid numbers or \"quit\" to exit.')",
   "10-8": "try:\n    with open('cats.txt') as cats:\n        print(\"Contents of cats.txt:\")\n        print(cats.read())\nexcept FileNotFoundError as e:\n    print(f\"Error: {e.filename} not found.\")\n\ntry:\n    with open('dogs.txt') as dogs:\n        print(\"\\nContents of dogs.txt:\")\n        print(dogs.read())\nexcept FileNotFoundError as e:\n    print(f\"Error: {e.filename} not found.\")",
     "10-9": "try:\n    with open('cats.tdxt') as cats:\n        print(\"Contents of cats.txt:\")\n        print(cats.read())\nexcept FileNotFoundError as e:\n    print(f\"Error: {e.filename} not found.\")\n\ntry:\n    with open('dogs.txt') as dogs:\n        print(\"\\nContents of dogs.txt:\")\n        print(dogs.read())\nexcept FileNotFoundError as e:\n    print(f\"Error: {e.filename} not found.\")",
    "10-10": "def count_common_words(filename, word):\n    try:\n        total_words = filename.read().lower().count(word)\n        if total_words > 0:\n            print(f\"The word '{word}' appears in the file '{filename.name}' about {total_words} times.\")\n        else:\n            print(f\"The word '{word}' was not found in the file '{filename.name}'.\")   \n        \n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n   \n\nwith open('gutenberg_file.txt', 'r') as gbfile:\n    count_common_words(gbfile, 'thse')",
    "10-11": "import json\n# suppose this is favorite_number_writer.py file\nuser_favorite_number:int=int(input('Please enter your favorite number'))\nuser_store=json.dumps(user_favorite_number)\nwith open('json_data.txt','w') as jsonfile:\n    jsonfile.write(user_store)\n# suppose this is favorite_number_reader.py file    \nwith open('json_data.txt','r') as jsonreadfile:\n    user_favorite_number=json.loads(jsonreadfile.read())\n    print(f\"I know your favorite number! It’s {user_favorite_number}.\")",
      "10-12": "import json\ndef get_favorite_number(filename:str)->int|None:\n    try:\n        with open(filename, 'r') as file:\n            favorite_number = json.load(file)\n            print(f\"Your favorite number is {favorite_number}.\")\n            return favorite_number\n    except FileNotFoundError:\n        print(f\"{filename} not found.\")\n        return None\n    except json.JSONDecodeError:\n        print(f\"Error decoding {filename}.\")\n        return None\n\ndef store_favorite_number(filename:str)->int|None:\n    try:\n        favorite_number = int(input(\"What is your favorite number? \"))\n        with open(filename, 'w') as file:\n            json.dump(favorite_number, file)\n        print(\"Favorite number stored successfully!\")\n    except ValueError:\n        print(\"Please enter a valid number.\")\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n\ndef main():\n    filename = 'favorite_number.json'\n    favorite_number = get_favorite_number(filename)\n    if favorite_number is None:\n        store_favorite_number(filename)\n    else:\n        print(\"Welcome back!\")\n        print(f\"Your favorite number is {favorite_number}.\")\n\n \nmain()",
    "10-13": "import json\nfrom typing import Dict\n\ndef get_user_info()->Dict[str,str|int]:\n    username:str = input(\"Enter your username: \")\n    age:int = int(input(\"Enter your age: \"))\n    email:str = input(\"Enter your email: \")\n    return {\"username\": username, \"age\": age, \"email\": email}\n\ndef store_user_info(user_info, filename)->None:\n    with open(filename, 'w') as file:\n        json.dump(user_info, file)\n    print(\"User information stored successfully!\")\n\ndef read_user_info(filename):\n    try:\n        with open(filename, 'r') as file:\n            user_info = json.load(file)\n        return user_info\n    except FileNotFoundError:\n        print(f\"File '{filename}' not found.\")\n        return None\n    except json.JSONDecodeError:\n        print(f\"Error decoding JSON from '{filename}'.\")\n        return None\n\ndef main():\n    filename = 'user_info.json'\n    user_info = read_user_info(filename)\n    if user_info is None:\n        print(\"No user information found.\")\n        user_info = get_user_info()\n        store_user_info(user_info, filename)\n    else:\n        print(\"User information found:\")\n        print(f\"Username: {user_info['username']}\")\n        print(f\"Age: {user_info['age']}\")\n        print(f\"Email: {user_info['email']}\")\n\nmain()",
    "10-14": "import json\n\ndef get_stored_username(filename:str)->str|None:\n    try:\n        with open(filename, 'r') as file:\n            user_info = json.load(file)\n        return user_info[\"username\"]\n    except FileNotFoundError:\n        return None\n    except json.JSONDecodeError:\n        print(f\"Error decoding JSON from '{filename}'.\")\n        return None\n\ndef get_new_username()->str:\n    username:str = input(\"Enter your username: \")\n    return username\n\ndef greet_user(filename)->None:\n    stored_username = get_stored_username(filename)\n    if stored_username:\n        print(f\"Welcome back, {stored_username}!\")\n        confirm_username = input(\"Is this the correct username? (yes/no): \")\n        if confirm_username.lower() != \"yes\":\n            stored_username = get_new_username()\n            with open(filename, 'w') as file:\n                json.dump({\"username\": stored_username}, file)\n            print(f\"Your username has been updated to {stored_username}.\")\n        else:\n            print(\"Enjoy your session!\")\n    else:\n        username = get_new_username()\n        with open(filename, 'w') as file:\n            json.dump({\"username\": username}, file)\n        print(f\"We'll remember you when you come back, {username}!\")\n\ndef main():\n    filename = 'username.json'\n    greet_user(filename)\n\nmain()",

    
  
}




       