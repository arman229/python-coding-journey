from typing import Dict
questions:Dict[str,str] = {
    "2-1": "Simple Message: Assign a message to a variable, and then print that message.",
    "2-2": "Simple Messages: Assign a message to a variable, and print that message. Then change the value of the variable to a new message, and print the new message.",
    "2-3": "Personal Message: Use a variable to represent a person’s name, and print a message to that person. Your message should be simple, such as, “Hello Eric, would you like to learn some Python today?”",
    "2-4": "Name Cases: Use a variable to represent a person’s name, and then print that person’s name in lowercase, uppercase, and title case.",
    "2-5": "Famous Quote: Find a quote from a famous person you admire. Print the quote and the name of its author. Your output should look something like the following, including the quotation marks: Albert Einstein once said, “A person who never made a mistake never tried anything new.”",
    "2-6": "Famous Quote 2: Repeat Exercise 2-5, but this time, represent the famous person’s name using a variable called famous_person. Then compose your message and represent it with a new variable called message. Print your message.",
    "2-7": "Stripping Names: Use a variable to represent a person’s name, and include some whitespace characters at the beginning and end of the name. Make sure you use each character combination, '\t' and , at least once. Print the name once, so the whitespace around the name is displayed. Then print the name using each of the three stripping functions, lstrip(), rstrip(), and strip().",
    "2-8": "File Extensions: Python has a removesuffix() method that works exactly like removeprefix(). Assign the value 'python_notes.txt' to a variable called filename. Then use the removesuffix() method to display the filename without the file extension, like some file browsers do.",
    "2-9": "Number Eight: Write addition, subtraction, multiplication, and division operations that each result in the number 8. Be sure to enclose your operations in print() calls to see the results. You should create four lines that look like this: print(5+3) Your output should be four lines, with the number 8 appearing once on each line.",
    "2-10": "Favorite Number: Use a variable to represent your favorite number. Then, using that variable, create a message that reveals your favorite number. Print that message.",
    "2-11": "Adding Comments: Choose two of the programs you’ve written, and add at least one comment to each. If you don’t have anything specific to write because your programs are too simple at this point, just add your name and the current date at the top of each program file. Then write one sentence describing what the program does.",
    "2-12": "Zen of Python: Enter import this into a Python terminal session and skim through the additional principles.",
    "3-1": "Names: Store the names of a few of your friends in a list called names. Print each person’s name by accessing each element in the list, one at a time.",
    "3-2": "Greetings: Start with the list you used in Exercise 3-1, but instead of just printing each person’s name, print a message to them. The text of each message should be the same, but each message should be personalized with the person’s name.",
    "3-3": "Your Own List: Think of your favorite mode of transportation, such as a motorcycle or a car, and make a list that stores several examples. Use your list to print a series of statements about these items, such as “I would like to own a Honda motorcycle.”",
    "3-4": "Guest List: If you could invite anyone, living or deceased, to dinner, who would you invite? Make a list that includes at least three people you’d like to invite to dinner. Then use your list to print a message to each person, inviting them to dinner.",
    "3-5": "Changing Guest List: You just heard that one of your guests can’t make the dinner, so you need to send out a new set of invitations. You’ll have to think of someone else to invite.",
    "3-6": "More Guests: You just found a bigger dinner table, so now more space is available. Think of three more guests to invite to dinner.",
    "3-7": "Shrinking Guest List: You just found out that your new dinner table won’t arrive in time for the dinner, and now you have space for only two guests.",
    "3-8": "Seeing the World: Think of at least five places in the world you’d like to visit.",
    "3-9": "Dinner Guests: Working with one of the programs from Exercises 3-4 through 3-7, use len() to print a message indicating the number of people you’re inviting to dinner.",
    "3-10": "Every Function: Think of things you could store in a list. Write a program that creates a list containing these items and then uses each function introduced in this chapter at least once.",
    "3-11": "Intentional Error: If you haven’t received an index error in one of your programs yet, try to make one happen.",
    "4-1": "Pizzas: Think of at least three kinds of your favorite pizza. Store these pizza names in a list, and then use a for loop to print the name of each pizza.Modify your for loop to print a sentence using the name of the pizza, instead of printing just the name of the pizza. For each pizza, you should have one line of output containing a simple statement like I like pepperoni pizza.Add a line at the end of your program, outside the for loop, that states how much you like pizza. The output should consist of three or more lines about the kinds of pizza you like and then an additional sentence, such as I really love pizza!",
    "4-2": "Animals: Think of at least three different animals that have a common characteristic. Store the names of these animals in a list, and then use a for loop to print out the name of each animal.Modify your program to print a statement about each animal, such as A dog would make a great pet.Add a line at the end of your program, stating what these animals have in common. You could print a sentence, such as Any of these animals would make a great pet!",
    "4-3": "Counting to Twenty: Use a for loop to print the numbers from 1 to 20, inclusive.",
    "4-4": "One Million: Make a list of the numbers from one to one million, and then use a for loop to print the numbers. (If the output is taking too long, stop it by pressing CTRL-C or by closing the output window.)",
    "4-5": "Summing a Million: Make a list of the numbers from one to one million, and then use min() and max() to make sure your list actually starts at one and ends at one million. Also, use the sum() function to see how quickly Python can add a million numbers.",
    "4-6": "Odd Numbers: Use the third argument of the range() function to make a list of the odd numbers from 1 to 20. Use a for loop to print each number.",
    "4-7": "Threes: Make a list of the multiples of 3, from 3 to 30. Use a for loop to print the numbers in your list.",
    "4-8": "Cubes: A number raised to the third power is called a cube. For example, the cube of 2 is written as 2**3 in Python. Make a list of the first 10 cubes (that is, the cube of each integer from 1 through 10), and use a for loop to print out the value of each cube.",
    "4-9": "Cube Comprehension: Use a list comprehension to generate a list of the first 10 cubes.",
    "4-10": "Slices: Using one of the programs you wrote in this chapter, add several lines to the end of the program that do the following: print the first three items from that program’s list.Print the message The first three items in the list are:. Then use a slice to Print the message Three items from the middle of the list are:. Then use a slice to print three items from the middle of the list.Print the message The last three items in the list are:. Then use a slice to print the last three items in the list.",
    "4-11": "My Pizzas, Your Pizzas: Start with your program from Exercise 4-1 (page 56). Make a copy of the list of pizzas, and call it friend_pizzas. Then, do the following:Add a new pizza to the original list.Add a different pizza to the list friend_pizzas.Prove that you have two separate lists. Print the message My favorite pizzas are:, and then use a for loop to print the first list. Print the message My friend’s favorite pizzas are:, and then use a for loop to print the second list. Make sure each new pizza is stored in the appropriate list.",
    "4-12": "More Loops: All versions of foods.py in this section have avoided using for loops when printing, to save space. Choose a version of foods.py, and write two for loops to print each list of foods.",
    "4-13": "Buffet: A buffet-style restaurant offers only five basic foods. Think of five simple foods, and store them in a tuple. • Use a for loop to print each food the restaurant offers. • Try to modify one of the items, and make sure that Python rejects the change. • The restaurant changes its menu, replacing two of the items with different foods. Add a line that rewrites the tuple, and then use a for loop to print each of the items on the revised menu.",
    "5-1": "Conditional Tests: Write a series of conditional tests. Print a statement describing each test and your prediction for the results of each test. Your code should look something like this: car = 'subaru' print('Is car == subaru? I predict True.') print(car == 'subaru') print('Is car == audi? I predict False.') print(car == 'audi') Look closely at your results, and make sure you understand why each line evaluates to True or False. Create at least 10 tests. Have at least 5 tests evaluate to True and another 5 tests evaluate to False.",
    "5-2": "More Conditional Tests: You don’t have to limit the number of tests you create to 10. If you want to try more comparisons, write more tests and add them to conditional_tests.py. Have at least one True and one False result for each of the following: less than, greater than, equal to, greater than or equal to, and less than or equal to. Tests for equality and inequality with strings. Tests using the lower() method. Numerical tests involving equality and inequality, greater than and less than. Tests using the and keyword and the or keyword. Test whether an item is in a list. Test whether an item is not in a list.",
    "5-3": "Alien Colors #1: Imagine an alien was just shot down in a game. Create a variable called alien_color and assign it a value of 'green', 'yellow', or 'red'. Write an if statement to test whether the alien’s color is green. If it is, print a message that the player just earned 5 points. Write one version of this program that passes the if test and another that fails.",
    "5-4": "Alien Colors #2: Choose a color for an alien as you did in Exercise 5-3, and write an if-else chain. If the alien’s color is green, print a statement that the player just earned 5 points. If the alien’s color isn’t green, print a statement that the player just earned 10 points. Write one version of this program that runs the if block and another that runs the else block.",
    "5-5": "Alien Colors #3: Turn your if-else chain from Exercise 5-4 into an if-elif-else chain. If the alien is green, print a message that the player earned 5 points. If the alien is yellow, print a message that the player earned 10 points. If the alien is red, print a message that the player earned 15 points. Write three versions of this program, making sure each message is printed for the appropriate color alien.",
    "5-6": "Stages of Life: Write an if-elif-else chain that determines a person’s stage of life. Set a value for the variable age, and then: If the person is less than 2 years old, print a message that the person is a baby. If the person is at least 2 years old but less than 4, print a message that the person is a toddler. If the person is at least 4 years old but less than 13, print a message that the person is a kid. If the person is at least 13 years old but less than 20, print a message that the person is a teenager. If the person is at least 20 years old but less than 65, print a message that the person is an adult. If the person is age 65 or older, print a message that the person is an elder.",
    "5-7": "Favorite Fruit: Make a list of your favorite fruits, and then write a series of independent if statements that check for certain fruits in your list. Make a list of your three favorite fruits and call it favorite_fruits. Write five if statements. Each should check whether a certain kind of fruit is in your list. If the fruit is in your list, the if block should print a statement, such as You really like bananas!",
    "5-8": "Hello Admin: Make a list of five or more usernames, including the name 'admin'. Imagine you are writing code that will print a greeting to each user after they log in to a website. Loop through the list, and print a greeting to each user. If the username is 'admin', print a special greeting, such as Hello admin, would you like to see a status report? Otherwise, print a generic greeting, such as Hello Jaden, thank you for logging in again.",
    "5-9": "No Users: Add an if test to hello_admin.py to make sure the list of users is not empty. If the list is empty, print the message We need to find some users! Remove all of the usernames from your list, and make sure the correct message is printed.",
    "5-10": "Checking Usernames: Do the following to create a program that simulates how websites ensure that everyone has a unique username. Make a list of five or more usernames called current_users. Make another list of five usernames called new_users. Make sure one or two of the new usernames are also in the current_users list. Loop through the new_users list to see if each new username has already been used. If it has, print a message that the person will need to enter a new username. If a username has not been used, print a message saying Make sure your comparison is case insensitive. If 'John' has been used, 'JOHN' should not be accepted. (To do this, you’ll need to make a copy of current_users containing the lowercase versions of all existing users.)",
    "5-11": "Ordinal Numbers: Ordinal numbers indicate their position in a list, such as 1st or 2nd. Most ordinal numbers end in th, except 1, 2, and 3. Store the numbers 1 through 9 in a list. 8 Loop through the list. Use an if-elif-else chain inside the loop to print the proper ordinal ending for each number. Your output should read '1st 2nd 3rd 4th 5th 6th 7th 8th 9th', and each result should be on a separate line.",
    "6-1": "Person: Use a dictionary to store information about a person you know. Store their first name, last name, age, and the city in which they live. You should have keys such as first_name, last_name, age, and city. Print each piece of information stored in your dictionary.",
    "6-2": "Favorite Numbers: Use a dictionary to store people’s favorite numbers. Think of five names, and use them as keys in your dictionary. Think of a favorite number for each person, and store each as a value in your dictionary. Print each person’s name and their favorite number.",
    "6-3": "Glossary: A Python dictionary can be used to model an actual dictionary. However, to avoid confusion, let’s call it a glossary. Print the word followed by a colon and then its meaning, or print the word on one line and then print its meaning indented on a second line. Use the newline character (\) to insert a blank line between each word-meaning pair in your output.",
    "6-4": "Glossary 2: Now that you know how to loop through a dictionary, clean up the code from Exercise 6-3 by replacing your series of print() calls with a loop that runs through the dictionary’s keys and values.",
    "6-5": "Rivers: Make a dictionary containing three major rivers and the country each river runs through. Use a loop to print a sentence about each river, print the name of each river included in the dictionary, and print the name of each country included in the dictionary.",
    "6-6": "Polling: Use the code in favorite_languages.py. Make a list of people who should take the favorite languages poll. Loop through the list of people who should take the poll. If they have already taken the poll, print a message thanking them for responding. If they have not yet taken the poll, print a message inviting them to take the poll.",
    "6-7": "People: Start with the program you wrote for Exercise 6-1. Make two new dictionaries representing different people, and store all three dictionaries in a list called people. Loop through your list of people. As you loop through the list, print everything you know about each person.",
    "6-8": "Pets: Make several dictionaries, where each dictionary represents a different pet. In each dictionary, include the kind of animal and the owner’s name. Store these dictionaries in a list called pets. Next, loop through your list and as you do, print everything you know about each pet.",
    "6-9": "Favorite Places: Make a dictionary called favorite_places. Think of three names to use as keys in the dictionary, and store one to three favorite places for each person. Loop through the dictionary, and print each person’s name and their favorite places.",
    "6-10": "Favorite Numbers: Modify your program from Exercise 6-2 so each person can have more than one favorite number. Then print each person’s name along with their favorite numbers.",
    "6-11": "Cities: Make a dictionary called cities. Use the names of three cities as keys in your dictionary. Create a dictionary of information about each city and include the country that the city is in, its approximate population, and one fact about that city. Print the name of each city and all of the information you have stored about it.",
    "6-12": "Extensions: We’re now working with examples that are complex enough that they can be extended in any number of ways. Use one of the example programs from this chapter, and extend it by adding new keys and values, changing the context of the program, or improving the formatting of the output.",
    "7-1": "Rental Car: Write a program that asks the user what kind of rental car they would like. Print a message about that car, such as “Let me see if I can find you a Subaru.”",
    "7-2": "Restaurant Seating: Write a program that asks the user how many people are in their dinner group. If the answer is more than eight, print a message saying they’ll have to wait for a table. Otherwise, report that their table is ready.",
    "7-3": "Multiples of Ten: Ask the user for a number, and then report whether the number is a multiple of 10 or not.",
    "7-4": "Pizza Toppings: Write a loop that prompts the user to enter a series of pizza toppings until they enter a 'quit' value. As they enter each topping, print a message saying you’ll add that topping to their pizza.",
    "7-5": "Movie Tickets: A movie theater charges different ticket prices depending on a person’s age. If a person is under the age of 3, the ticket is free; if they are between 3 and 12, the ticket is $10; otherwise, the ticket is $15. Write a loop in which you ask users their age, and then tell them the cost of their movie ticket.",
    "7-6": "Three Exits: Write different versions of either Exercise 7-4 or 7-5 that do each of the following at least once: • Use a conditional test in the while statement to stop the loop. • Use an active variable to control how long the loop runs. • Use a break statement to exit the loop when the user enters a 'quit' value.",
    "7-7": "Infinity: Write a loop that never ends, and run it. (To end the loop, press CTRL-C or close the window displaying the output.)",
    "7-8": "Deli: Make a list called sandwich_orders and fill it with the names of various sandwiches. Then make an empty list called finished_sandwiches. Loop through the list of sandwich orders and print a message for each order, such as I made your tuna sandwich. As each sandwich is made, move it to the list of finished sandwiches. After all the sandwiches have been made, print a message listing each sandwich that was made.",
    "7-9": "No Pastrami: Using the list sandwich_orders from Exercise 7-8, make sure the sandwich 'pastrami' appears in the list at least three times. Add code near the beginning of your program to print a message saying the deli has run out of pastrami, and then use a while loop to remove all occurrences of 'pastrami' from sandwich_orders. Make sure no pastrami sandwiches end up in finished_sandwiches.",
    "7-10": "Dream Vacation: Write a program that polls users about their dream vacation. Write a prompt similar to 'If you could visit one place in the world, where would you go?' Include a block of code that prints the results of the poll.",
    "8-1": "Message: Write a function called display_message() that prints one sentence telling everyone what you are learning about in this chapter. Call the function, and make sure the message displays correctly.",
    "8-2": "Favorite Book: Write a function called favorite_book() that accepts one parameter, title. The function should print a message, such as One of my favorite books is Alice in Wonderland. Call the function, making sure to include a book title as an argument in the function call.",
    "8-3": "T-Shirt: Write a function called make_shirt() that accepts a size and the text of a message that should be printed on the shirt. The function should print a sentence summarizing the size of the shirt and the message printed on it. Call the function once using positional arguments to make a shirt. Call the function a second time using keyword arguments.",
    "8-4": "Large Shirts: Modify the make_shirt() function so that shirts are large by default with a message that reads I love Python. Make a large shirt and a medium shirt with the default message, and a shirt of any size with a different message.",
    "8-5": "Cities: Write a function called describe_city() that accepts the name of a city and its country. The function should print a simple sentence, such as Reykjavik is in Iceland. Give the parameter for the country a default value. Call your function for three different cities, at least one of which is not in the default country.",
    "8-6": "City Names: Write a function called city_country() that takes in the name of a city and its country. The function should return a string formatted like this: 'Santiago, Chile'. Call your function with at least three city-country pairs, and print the value that’s returned.",
    "8-7": "Album: Write a function called make_album() that builds a dictionary describing a music album. The function should take in an artist name and an album title, and it should return a dictionary containing these two pieces of information. Use the function to make three dictionaries representing different albums. Print each return value to show that the dictionaries are storing the album information correctly. Use None to add an optional parameter to make_album() that allows you to store the number of songs on an album. If the calling line includes a value for the number of songs, add that value to the album’s dictionary. Make at least one new function call that includes the number of songs on an album.",
    "8-8": "User Albums: Start with your program from Exercise 8-7. Write a while loop that allows users to enter an album’s artist and title. Once you have that information, call make_album() with the user’s input and print the dictionary that’s created. Be sure to include a quit value in the while loop.",
    "8-9": "Messages: Make a list containing a series of short text messages. Pass the list to a function called show_messages(), which prints each text message.",
    "8-10": "Sending Messages: Start with a copy of your program from Exercise 8-9. Write a function called send_messages() that prints each text message and moves each message to a new list called sent_messages as it’s printed. After calling the function, print both of your lists to make sure the messages were moved correctly.",
    "8-11": "Archived Messages: Start with your work from Exercise 8-10. Call the function send_messages() with a copy of the list of messages. After calling the function, print both of your lists to show that the original list has retained its messages.",
    "8-12": "Sandwiches: Write a function that accepts a list of items a person wants on a sandwich. The function should have one parameter that collects as many items as the function call provides, and it should print a summary of the sandwich that’s being ordered. Call the function three times, using a different number of arguments each time.",
    "8-13": "User Profile: Start with a copy of user_profile.py from page 148. Build a profile of yourself by calling build_profile(), using your first and last names and three other key-value pairs that describe you.",
    "8-14": "Cars: Write a function that stores information about a car in a dictionary. The function should always receive a manufacturer and a model name. It should then accept an arbitrary number of keyword arguments. Call the function with the required information and two other name-value pairs, such as a color or an optional feature. Your function should work for a call like this one: car = make_car('subaru', 'outback', color='blue', tow_package=True) Print the dictionary that’s returned to make sure all the information was stored correctly.",
    "8-15": "Printing Models: Put the functions for the example printing_models.py in a separate file called printing_functions.py. Write an import statement at the top of printing_models.py, and modify the file to use the imported functions.",
    "8-16": "Imports: Using a program you wrote that has one function in it, store that function in a separate file. Import the function into your main program file, and call the function using each of these approaches: import module_name from module_name import function_name from module_name import function_name as fn import module_name as mn from module_name import *",
    "8-17": "Styling Functions: Choose any three programs you wrote for this chapter, and make sure they follow the styling guidelines described in this section.",      "9-1": "Restaurant: Make a class called Restaurant. The init() method for Restaurant should store two attributes: a restaurant_name and a cuisine_type. Make a method called describe_restaurant() that prints these two pieces of information, and a method called open_restaurant() that prints a message indicating that the restaurant is open. Make an instance called restaurant from your class. Print the two attributes individually, and then call both methods.",
    "9-2": "Three Restaurants: Start with your class from Exercise 9-1. Create three different instances from the class, and call describe_restaurant() for each instance.",
    "9-3": "Users: Make a class called User. Create two attributes called first_name and last_name, and then create several other attributes that are typically stored in a user profile. Make a method called describe_user() that prints a summary of the user’s information. Make another method called greet_user() that prints a personalized greeting to the user. Create several instances representing different users, and call both methods for each user.",
    "9-4": "Number Served: Start with your program from Exercise 9-1. Add an attribute called number_served with a default value of 0. Create an instance called restaurant from this class. Print the number of customers the restaurant has served, and then change this value and print it again. Add a method called set_number_served() that lets you set the number of customers that have been served. Call this method with a new number and print the value again. Add a method called increment_number_served() that lets you increment the number of customers who’ve been served. Call this method with any number you like that could represent how many customers were served in, say, a day of business.",
    "9-5": "Login Attempts: Add an attribute called login_attempts to your User class from Exercise 9-3. Write a method called increment_login_attempts() that increments the value of login_attempts by 1. Write another method called reset_login_attempts() that resets the value of login_attempts to 0. Make an instance of the User class and call increment_login_attempts() several times. Print the value of login_attempts to make sure it was incremented properly, and then call reset_login_attempts(). Print login_attempts again to make sure it was reset to 0.",
    "9-6": "Ice Cream Stand: An ice cream stand is a specific kind of restaurant. Write a class called IceCreamStand that inherits from the Restaurant class you wrote in Exercise 9-1 or Exercise 9-4. Either version of the class will work; just pick the one you like better. Add an attribute called flavors that stores a list of ice cream flavors. Write a method that displays these flavors. Create an instance of IceCreamStand, and call this method.",
    "9-7": "Admin: An administrator is a special kind of user. Write a class called Admin that inherits from the User class you wrote in Exercise 9-3 or Exercise 9-5. Add an attribute, privileges, that stores a list of strings like 'can add post', 'can delete post', 'can ban user', and so on. Write a method called show_privileges() that lists the administrator’s set of privileges. Create an instance of Admin, and call your method.",
    "9-8": "Privileges: Write a separate Privileges class. The class should have one attribute, privileges, that stores a list of strings as described in Exercise 9-7. Move the show_privileges() method to this class. Make a Privileges instance as an attribute in the Admin class. Create a new instance of Admin and use your method to show its privileges.",
    "9-9": "Battery Upgrade: Use the final version of electric_car.py from this section. Add a method to the Battery class called upgrade_battery(). This method should check the battery size and set the capacity to 65 if it isn’t already. Make an electric car with a default battery size, call get_range() once, and then call get_range() a second time after upgrading the battery. You should see an increase in the car’s range.",
    "9-10": "Imported Restaurant: Using your latest Restaurant class, store it in a module. Make a separate file that imports Restaurant. Make a Restaurant instance, and call one of Restaurant’s methods to show that the import statement is working properly.",
    "9-11": "Imported Admin: Start with your work from Exercise 9-8. Store the classes User, Privileges, and Admin in one module. Create a separate file, make an Admin instance, and call show_privileges() to show that everything is working correctly.",
    "9-12": "Multiple Modules: Store the User class in one module, and store the Privileges and Admin classes in a separate module. In a separate file, create an Admin instance and call show_privileges() to show that everything is still working correctly.",
    "9-13": "Dice: Make a class Die with one attribute called sides, which has a default value of 6. Write a method called roll_die() that prints a random number between 1 and the number of sides the die has. Make a 6-sided die and roll it 10 times. Make a 10-sided die and a 20-sided die. Roll each die 10 times.",
    "9-14": "Lottery: Make a list or tuple containing a series of 10 numbers and 5 letters. Randomly select 4 numbers or letters from the list and print a message saying that any ticket matching these 4 numbers or letters wins a prize.",
    "9-15": "Lottery Analysis: You can use a loop to see how hard it might be to win the kind of lottery you just modeled. Make a list or tuple called my_ticket. Write a loop that keeps pulling numbers until your ticket wins. Print a message reporting how many times the loop had to run to give you a winning ticket.",
    "9-16": "Python Module of the Week: One excellent resource for exploring the Python standard library is a site called Python Module of the Week. Go to https://pymotw.com and look at the table of contents. Find a module that looks interesting to you and read about it, perhaps starting with the random module."






        }